{"version":3,"file":"index.umd.js","sources":["../src/lib/emailService.ts","../node_modules/lucide-react/dist/esm/shared/src/utils.js","../node_modules/lucide-react/dist/esm/defaultAttributes.js","../node_modules/lucide-react/dist/esm/Icon.js","../node_modules/lucide-react/dist/esm/createLucideIcon.js","../node_modules/lucide-react/dist/esm/icons/mail.js","../node_modules/lucide-react/dist/esm/icons/play.js","../node_modules/lucide-react/dist/esm/icons/save.js","../node_modules/lucide-react/dist/esm/icons/send.js","../src/components/EmailNotifications.tsx","../src/components/LessonReminderSettings.tsx","../src/components/LessonReminderSettingsPage.tsx"],"sourcesContent":["// Email service using Lambda + SES for better security\nexport interface EmailData {\n  to: string;\n  subject: string;\n  htmlBody: string;\n  textBody?: string;\n  from?: string;\n}\n\nexport class EmailService {\n  private static instance: EmailService;\n  private lambdaUrl: string;\n  private defaultFrom: string;\n\n  private constructor() {\n    // This will be set by the consuming app\n    this.lambdaUrl = '';\n    this.defaultFrom = 'kahuna@raynsecure.com';\n  }\n\n  public static getInstance(): EmailService {\n    if (!EmailService.instance) {\n      EmailService.instance = new EmailService();\n    }\n    return EmailService.instance;\n  }\n\n  public static configure(config: {\n    lambdaUrl: string;\n    fromEmail?: string;\n  }): void {\n    EmailService.getInstance().lambdaUrl = config.lambdaUrl;\n    if (config.fromEmail) {\n      EmailService.getInstance().defaultFrom = config.fromEmail;\n    }\n  }\n\n  async sendEmail(emailData: EmailData, supabaseClient?: any): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    // NEW METHOD: Use Supabase Edge Function instead of direct Lambda call\n    try {\n      // Use provided supabase client or fallback to direct fetch\n      if (supabaseClient) {\n        const { data, error } = await supabaseClient.functions.invoke('send-email', {\n          body: {\n            to: emailData.to,\n            subject: emailData.subject,\n            html: emailData.htmlBody, // Note: Edge Function expects 'html', not 'htmlBody'\n          }\n        });\n\n        if (error) {\n          return {\n            success: false,\n            error: error.message || 'Failed to send email',\n          };\n        }\n\n        if (data && data.success) {\n          return {\n            success: true,\n            messageId: data.messageId,\n          };\n        } else {\n          return {\n            success: false,\n            error: data?.error || 'Failed to send email',\n          };\n        }\n      } else {\n        // Fallback to direct fetch if no supabase client provided\n        const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://ufvingocbzegpgjknzhm.supabase.co';\n        const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n        \n        if (!supabaseKey) {\n          return {\n            success: false,\n            error: 'Supabase client not provided and VITE_SUPABASE_ANON_KEY not configured',\n          };\n        }\n\n        const response = await fetch(`${supabaseUrl}/functions/v1/send-email`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${supabaseKey}`,\n          },\n          body: JSON.stringify({\n            to: emailData.to,\n            subject: emailData.subject,\n            html: emailData.htmlBody,\n          }),\n        });\n\n        const result = await response.json();\n\n        if (response.ok && result.success) {\n          return {\n            success: true,\n            messageId: result.messageId,\n          };\n        } else {\n          return {\n            success: false,\n            error: result.error || 'Failed to send email',\n          };\n        }\n      }\n    } catch (error: any) {\n      console.error('Error sending email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send email',\n      };\n    }\n  }\n\n  // Template for lesson reminder emails\n  async sendLessonReminder(to: string, lessonTitle: string, scheduledTime: string, supabaseClient?: any): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = `Reminder: ${lessonTitle} starts soon`;\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #2563eb;\">Lesson Reminder</h2>\n        <p>Hello!</p>\n        <p>This is a friendly reminder that your lesson <strong>${lessonTitle}</strong> is scheduled to start at <strong>${scheduledTime}</strong>.</p>\n        <p>Please make sure you're ready to begin your cybersecurity training session.</p>\n        <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"margin-top: 0;\">Lesson Details:</h3>\n          <p><strong>Title:</strong> ${lessonTitle}</p>\n          <p><strong>Time:</strong> ${scheduledTime}</p>\n        </div>\n        <p>Best regards,<br>Your Cybersecurity Training Team</p>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to,\n      subject,\n      htmlBody,\n    }, supabaseClient);\n  }\n\n  // Template for task due date reminders\n  async sendTaskDueReminder(to: string, taskName: string, dueDate: string, supabaseClient?: any): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = `Reminder: ${taskName} is due soon`;\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #dc2626;\">Task Due Reminder</h2>\n        <p>Hello!</p>\n        <p>This is a reminder that your task <strong>${taskName}</strong> is due on <strong>${dueDate}</strong>.</p>\n        <p>Please complete this task to stay on track with your cybersecurity training.</p>\n        <div style=\"background-color: #fef2f2; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626;\">\n          <h3 style=\"margin-top: 0; color: #dc2626;\">Task Details:</h3>\n          <p><strong>Task:</strong> ${taskName}</p>\n          <p><strong>Due Date:</strong> ${dueDate}</p>\n        </div>\n        <p>Best regards,<br>Your Cybersecurity Training Team</p>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to,\n      subject,\n      htmlBody,\n    }, supabaseClient);\n  }\n\n  // Template for achievement emails\n  async sendAchievementEmail(to: string, achievementTitle: string, achievementDescription: string, supabaseClient?: any): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = `Congratulations! You've earned: ${achievementTitle}`;\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #059669;\">üéâ Achievement Unlocked!</h2>\n        <p>Congratulations!</p>\n        <p>You've successfully earned the achievement: <strong>${achievementTitle}</strong></p>\n        <div style=\"background-color: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #059669;\">\n          <h3 style=\"margin-top: 0; color: #059669;\">Achievement Details:</h3>\n          <p><strong>Title:</strong> ${achievementTitle}</p>\n          <p><strong>Description:</strong> ${achievementDescription}</p>\n        </div>\n        <p>Keep up the great work in your cybersecurity journey!</p>\n        <p>Best regards,<br>Your Cybersecurity Training Team</p>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to,\n      subject,\n      htmlBody,\n    }, supabaseClient);\n  }\n\n  // Template for course completion emails\n  async sendCourseCompletionEmail(to: string, courseName: string, supabaseClient?: any): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = `Congratulations! You've completed ${courseName}`;\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #7c3aed;\">üéì Course Completed!</h2>\n        <p>Congratulations on completing your course!</p>\n        <p>You've successfully finished: <strong>${courseName}</strong></p>\n        <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #7c3aed;\">\n          <h3 style=\"margin-top: 0; color: #7c3aed;\">Course Details:</h3>\n          <p><strong>Course:</strong> ${courseName}</p>\n          <p><strong>Status:</strong> ‚úÖ Completed</p>\n        </div>\n        <p>You're now one step closer to becoming a cybersecurity expert!</p>\n        <p>Best regards,<br>Your Cybersecurity Training Team</p>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to,\n      subject,\n      htmlBody,\n    }, supabaseClient);\n  }\n\n  // Template for system alert emails\n  async sendSystemAlert(to: string, alertTitle: string, alertMessage: string, supabaseClient?: any): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = `System Alert: ${alertTitle}`;\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #ea580c;\">‚ö†Ô∏è System Alert</h2>\n        <p>Hello!</p>\n        <p>This is an important system alert regarding: <strong>${alertTitle}</strong></p>\n        <div style=\"background-color: #fff7ed; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ea580c;\">\n          <h3 style=\"margin-top: 0; color: #ea580c;\">Alert Details:</h3>\n          <p><strong>Title:</strong> ${alertTitle}</p>\n          <p><strong>Message:</strong> ${alertMessage}</p>\n        </div>\n        <p>Please take note of this information.</p>\n        <p>Best regards,<br>Your Cybersecurity Training Team</p>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to,\n      subject,\n      htmlBody,\n    }, supabaseClient);\n  }\n}\n\nexport const emailService = EmailService.getInstance();\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nconst toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst mergeClasses = (...classes) => classes.filter((className, index, array) => {\n  return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n}).join(\" \").trim();\n\nexport { mergeClasses, toKebabCase };\n//# sourceMappingURL=utils.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nvar defaultAttributes = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n};\n\nexport { defaultAttributes as default };\n//# sourceMappingURL=defaultAttributes.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\nimport { mergeClasses } from './shared/src/utils.js';\n\nconst Icon = forwardRef(\n  ({\n    color = \"currentColor\",\n    size = 24,\n    strokeWidth = 2,\n    absoluteStrokeWidth,\n    className = \"\",\n    children,\n    iconNode,\n    ...rest\n  }, ref) => {\n    return createElement(\n      \"svg\",\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: mergeClasses(\"lucide\", className),\n        ...rest\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...Array.isArray(children) ? children : [children]\n      ]\n    );\n  }\n);\n\nexport { Icon as default };\n//# sourceMappingURL=Icon.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport { mergeClasses, toKebabCase } from './shared/src/utils.js';\nimport Icon from './Icon.js';\n\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef(\n    ({ className, ...props }, ref) => createElement(Icon, {\n      ref,\n      iconNode,\n      className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className),\n      ...props\n    })\n  );\n  Component.displayName = `${iconName}`;\n  return Component;\n};\n\nexport { createLucideIcon as default };\n//# sourceMappingURL=createLucideIcon.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Mail = createLucideIcon(\"Mail\", [\n  [\"rect\", { width: \"20\", height: \"16\", x: \"2\", y: \"4\", rx: \"2\", key: \"18n3k1\" }],\n  [\"path\", { d: \"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\", key: \"1ocrg3\" }]\n]);\n\nexport { Mail as default };\n//# sourceMappingURL=mail.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Play = createLucideIcon(\"Play\", [\n  [\"polygon\", { points: \"6 3 20 12 6 21 6 3\", key: \"1oa8hb\" }]\n]);\n\nexport { Play as default };\n//# sourceMappingURL=play.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Save = createLucideIcon(\"Save\", [\n  [\n    \"path\",\n    {\n      d: \"M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z\",\n      key: \"1c8476\"\n    }\n  ],\n  [\"path\", { d: \"M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7\", key: \"1ydtos\" }],\n  [\"path\", { d: \"M7 3v4a1 1 0 0 0 1 1h7\", key: \"t51u73\" }]\n]);\n\nexport { Save as default };\n//# sourceMappingURL=save.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Send = createLucideIcon(\"Send\", [\n  [\n    \"path\",\n    {\n      d: \"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z\",\n      key: \"1ffxy3\"\n    }\n  ],\n  [\"path\", { d: \"m21.854 2.147-10.94 10.939\", key: \"12cjpa\" }]\n]);\n\nexport { Send as default };\n//# sourceMappingURL=send.js.map\n","import React, { useState, useEffect } from 'react';\nimport { Mail, Send } from 'lucide-react';\nimport { emailService, EmailService } from '../lib/emailService';\n\n// These should be passed as props or configured externally\ninterface EmailNotificationsProps {\n  // Supabase client - should be passed from the consuming app\n  supabase: any;\n  // User object - should be passed from the consuming app\n  user: any;\n  // AWS configuration - should be passed from the consuming app\n  awsConfig?: {\n    lambdaUrl: string;\n    fromEmail: string;\n  };\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Input: any;\n  Label: any;\n  Switch: any;\n  Select: any;\n  SelectContent: any;\n  SelectItem: any;\n  SelectTrigger: any;\n  SelectValue: any;\n  Textarea: any;\n}\n\n\ninterface EmailPreferences {\n  userId: string;\n  emailEnabled: boolean;\n  lessonReminders: boolean;\n  taskDueDates: boolean;\n  systemAlerts: boolean;\n  achievements: boolean;\n  courseCompletions: boolean;\n  quietHoursEnabled: boolean;\n  quietHoursStart: string;\n  quietHoursEnd: string;\n}\n\nexport const EmailNotifications: React.FC<EmailNotificationsProps> = ({\n  supabase,\n  user,\n  awsConfig,\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Switch,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n}) => {\n  const [preferences, setPreferences] = useState<EmailPreferences | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const [testEmailType, setTestEmailType] = useState<string>('system_alert');\n\n  // Configure email service with AWS config\n  useEffect(() => {\n    if (awsConfig) {\n      EmailService.configure(awsConfig);\n    }\n  }, [awsConfig]);\n\n  // Load user preferences\n  useEffect(() => {\n    if (user) {\n      loadPreferences();\n    }\n  }, [user]);\n\n  const loadPreferences = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('email_preferences')\n        .select('*')\n        .eq('user_id', user?.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error loading preferences:', error);\n        return;\n      }\n\n      if (data) {\n        setPreferences(data);\n      } else {\n        // Create default preferences\n        const defaultPrefs: EmailPreferences = {\n          userId: user?.id || '',\n          emailEnabled: true,\n          lessonReminders: true,\n          taskDueDates: true,\n          systemAlerts: false,\n          achievements: true,\n          courseCompletions: true,\n          quietHoursEnabled: false,\n          quietHoursStart: '22:00',\n          quietHoursEnd: '08:00',\n        };\n        await createPreferences(defaultPrefs);\n        setPreferences(defaultPrefs);\n      }\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createPreferences = async (prefs: EmailPreferences) => {\n    const { error } = await supabase\n      .from('email_preferences')\n      .insert({\n        user_id: prefs.userId,\n        email_enabled: prefs.emailEnabled,\n        lesson_reminders: prefs.lessonReminders,\n        task_due_dates: prefs.taskDueDates,\n        system_alerts: prefs.systemAlerts,\n        achievements: prefs.achievements,\n        course_completions: prefs.courseCompletions,\n        quiet_hours_enabled: prefs.quietHoursEnabled,\n        quiet_hours_start: prefs.quietHoursStart,\n        quiet_hours_end: prefs.quietHoursEnd,\n      });\n\n    if (error) {\n      console.error('Error creating preferences:', error);\n    }\n  };\n\n  const updatePreferences = async (updates: Partial<EmailPreferences>) => {\n    const updatedPrefs = { \n      ...preferences, \n      ...updates, \n      userId: user.id // Always use current user ID\n    };\n    setPreferences(updatedPrefs);\n\n\n\n    const { error } = await supabase\n      .from('email_preferences')\n      .upsert({\n        user_id: user.id, // Always use current user ID\n        email_enabled: updatedPrefs.emailEnabled,\n        lesson_reminders: updatedPrefs.lessonReminders,\n        task_due_dates: updatedPrefs.taskDueDates,\n        system_alerts: updatedPrefs.systemAlerts,\n        achievements: updatedPrefs.achievements,\n        course_completions: updatedPrefs.courseCompletions,\n        quiet_hours_enabled: updatedPrefs.quietHoursEnabled,\n        quiet_hours_start: updatedPrefs.quietHoursStart,\n        quiet_hours_end: updatedPrefs.quietHoursEnd,\n      });\n\n    if (error) {\n      console.error('Error updating preferences:', error);\n    }\n  };\n\n\n  const sendTestEmail = async () => {\n    console.log('Send test email clicked. User:', user);\n    console.log('AWS Config:', awsConfig ? {\n      lambdaUrl: awsConfig.lambdaUrl ? 'Configured' : 'Not configured',\n      fromEmail: awsConfig.fromEmail\n    } : 'Not provided');\n    if (!user || !user.email) {\n      console.log('Missing user or email:', { user, email: user?.email });\n      return;\n    }\n\n    setSending(true);\n    try {\n      let emailResult;\n\n      // Send different types of test emails based on selection\n      switch (testEmailType) {\n        case 'lesson_reminder':\n          emailResult = await emailService.sendLessonReminder(\n            user.email,\n            'Introduction to Cybersecurity',\n            '2:00 PM today',\n            supabase\n          );\n          break;\n        case 'task_due':\n          emailResult = await emailService.sendTaskDueReminder(\n            user.email,\n            'Security Assessment Quiz',\n            'Tomorrow at 11:59 PM',\n            supabase\n          );\n          break;\n        case 'achievement':\n          emailResult = await emailService.sendAchievementEmail(\n            user.email,\n            'First Lesson Completed',\n            'You completed your first cybersecurity lesson!',\n            supabase\n          );\n          break;\n        case 'course_completion':\n          emailResult = await emailService.sendCourseCompletionEmail(\n            user.email,\n            'Cybersecurity Fundamentals',\n            supabase\n          );\n          break;\n        case 'system_alert':\n        default:\n          emailResult = await emailService.sendSystemAlert(\n            user.email,\n            'System Maintenance',\n            'Scheduled maintenance will occur tonight at 2 AM EST.',\n            supabase\n          );\n          break;\n      }\n\n      if (emailResult.success) {\n        // Save to database\n        const { error } = await supabase\n          .from('email_notifications')\n          .insert({\n            user_id: user.id,\n            type: testEmailType as any,\n            title: 'Test Email Notification',\n            message: `Test ${testEmailType} email sent successfully.`,\n            email: user.email,\n            status: 'sent',\n          });\n\n        if (error) {\n          console.error('Error saving notification:', error);\n        }\n\n        alert('Test email sent successfully!');\n      } else {\n        alert(`Failed to send email: ${emailResult.error}`);\n      }\n    } catch (error) {\n      console.error('Error sending test email:', error);\n      alert('Error sending test email. Please check console for details.');\n    } finally {\n      setSending(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-learning-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2\">\n        <Mail className=\"h-6 w-6 text-learning-primary\" />\n        <h2 className=\"text-2xl font-bold text-learning-primary\">Email Preferences</h2>\n      </div>\n\n      {/* Email Preferences */}\n      <div className=\"space-y-6\">\n          {/* Global Email Toggle */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-left\">\n              <Label htmlFor=\"email-enabled\">Enable Email Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Receive notifications via email\n              </p>\n            </div>\n            <Switch\n              id=\"email-enabled\"\n              checked={preferences?.emailEnabled || false}\n              onCheckedChange={(checked) => updatePreferences({ emailEnabled: checked })}\n            />\n          </div>\n\n          {/* Notification Type Preferences */}\n          {preferences?.emailEnabled && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">Notification Types</h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-left\">Lesson Reminders</Label>\n                  <Switch\n                    checked={preferences?.lessonReminders || false}\n                    onCheckedChange={(checked) => updatePreferences({ lessonReminders: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-left\">Task Due Dates</Label>\n                  <Switch\n                    checked={preferences?.taskDueDates || false}\n                    onCheckedChange={(checked) => updatePreferences({ taskDueDates: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-left\">System Alerts</Label>\n                  <Switch\n                    checked={preferences?.systemAlerts || false}\n                    onCheckedChange={(checked) => updatePreferences({ systemAlerts: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-left\">Achievements</Label>\n                  <Switch\n                    checked={preferences?.achievements || false}\n                    onCheckedChange={(checked) => updatePreferences({ achievements: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-left\">Course Completions</Label>\n                  <Switch\n                    checked={preferences?.courseCompletions || false}\n                    onCheckedChange={(checked) => updatePreferences({ courseCompletions: checked })}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Quiet Hours */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-left\">\n                <Label>Quiet Hours</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Don't send emails during these hours\n                </p>\n              </div>\n              <Switch\n                checked={preferences?.quietHoursEnabled || false}\n                onCheckedChange={(checked) => updatePreferences({ quietHoursEnabled: checked })}\n              />\n            </div>\n\n            {preferences?.quietHoursEnabled && (\n              <div className=\"flex items-center gap-4\">\n                <div>\n                  <Label>Start Time</Label>\n                  <Input\n                    type=\"time\"\n                    value={preferences?.quietHoursStart || '22:00'}\n                    onChange={(e) => updatePreferences({ quietHoursStart: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label>End Time</Label>\n                  <Input\n                    type=\"time\"\n                    value={preferences?.quietHoursEnd || '08:00'}\n                    onChange={(e) => updatePreferences({ quietHoursEnd: e.target.value })}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Test Email Section */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Test Email Notifications</h4>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1\">\n                <Label>Email Type</Label>\n                <Select value={testEmailType} onValueChange={setTestEmailType}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"system_alert\">System Alert</SelectItem>\n                    <SelectItem value=\"lesson_reminder\">Lesson Reminder</SelectItem>\n                    <SelectItem value=\"task_due\">Task Due Date</SelectItem>\n                    <SelectItem value=\"achievement\">Achievement</SelectItem>\n                    <SelectItem value=\"course_completion\">Course Completion</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button\n                onClick={sendTestEmail}\n                disabled={sending || !preferences?.emailEnabled}\n                className=\"flex items-center gap-2\"\n              >\n                {sending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                ) : (\n                  <Send className=\"h-4 w-4\" />\n                )}\n                Send Test Email\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n};\n\n","import React, { useState, useEffect } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { Save, Play } from 'lucide-react';\n\ninterface LessonReminderSettingsProps {\n  supabase: SupabaseClient;\n  // UI components passed as props for flexibility\n  Card?: any;\n  CardHeader?: any;\n  CardTitle?: any;\n  CardDescription?: any;\n  CardContent?: any;\n  Button?: any;\n  Switch?: any;\n  Input?: any;\n  Label?: any;\n  Alert?: any;\n  AlertDescription?: any;\n}\n\ninterface ReminderSettings {\n  id?: string;\n  enabled: boolean;\n  reminder_days_before: number;\n  reminder_time: string;\n  include_upcoming_lessons: boolean;\n  upcoming_days_ahead: number;\n  max_reminder_attempts: number;\n  reminder_frequency_days: number;\n}\n\nexport const LessonReminderSettings: React.FC<LessonReminderSettingsProps> = ({\n  supabase,\n  Card = 'div',\n  CardHeader = 'div',\n  CardTitle = 'h3',\n  CardDescription = 'p',\n  CardContent = 'div',\n  Button = 'button',\n  Switch = 'input',\n  Input = 'input',\n  Label = 'label',\n  Alert = 'div',\n  AlertDescription = 'p',\n}) => {\n  const [settings, setSettings] = useState<ReminderSettings>({\n    enabled: true,\n    reminder_days_before: 1,\n    reminder_time: '09:00:00',\n    include_upcoming_lessons: true,\n    upcoming_days_ahead: 3,\n    max_reminder_attempts: 3,\n    reminder_frequency_days: 7,\n  });\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const [testingReminders, setTestingReminders] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch the single global configuration row\n      const { data, error: fetchError } = await supabase\n        .from('lesson_reminder_config')\n        .select('*')\n        .eq('id', '00000000-0000-0000-0000-000000000001')\n        .single();\n\n      if (fetchError) {\n        console.error('Error loading reminder settings:', fetchError);\n        throw fetchError;\n      }\n\n      if (data) {\n        setSettings({\n          id: data.id,\n          enabled: data.enabled,\n          reminder_days_before: data.reminder_days_before,\n          reminder_time: data.reminder_time,\n          include_upcoming_lessons: data.include_upcoming_lessons,\n          upcoming_days_ahead: data.upcoming_days_ahead,\n          max_reminder_attempts: data.max_reminder_attempts || 3,\n          reminder_frequency_days: data.reminder_frequency_days || 7,\n        });\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load reminder settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveSettings = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      setSuccess(false);\n\n      // Always update the single global configuration row\n      const { error: updateError } = await supabase\n        .from('lesson_reminder_config')\n        .update({\n          enabled: settings.enabled,\n          reminder_days_before: settings.reminder_days_before,\n          reminder_time: settings.reminder_time,\n          include_upcoming_lessons: settings.include_upcoming_lessons,\n          upcoming_days_ahead: settings.upcoming_days_ahead,\n          max_reminder_attempts: settings.max_reminder_attempts,\n          reminder_frequency_days: settings.reminder_frequency_days,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', '00000000-0000-0000-0000-000000000001');\n\n      if (updateError) throw updateError;\n\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 3000);\n    } catch (err: any) {\n      console.error('Error saving reminder settings:', err);\n      setError(err.message || 'Failed to save reminder settings');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const testReminders = async () => {\n    try {\n      setTestingReminders(true);\n      setError(null);\n\n      // First validate admin permissions\n      const { data: authData, error: authError } = await supabase\n        .rpc('trigger_lesson_reminders');\n\n      if (authError) {\n        throw authError;\n      }\n\n      console.log('Admin validation result:', authData);\n\n      // Now call the actual Edge Function to send reminders\n      const { data, error } = await supabase.functions.invoke('send-lesson-reminders', {\n        body: {\n          test_mode: true\n        }\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      console.log('Lesson reminder result:', data);\n      alert(`Test completed! Processed: ${data?.processed || 0}, Sent: ${data?.sent || 0}`);\n    } catch (err: any) {\n      console.error('Error testing reminders:', err);\n      setError(err.message || 'Failed to test reminders');\n    } finally {\n      setTestingReminders(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent>\n          <p>Loading reminder settings...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-2\">\n        <h2 className=\"text-2xl font-bold text-learning-primary\">Lesson Reminder Settings</h2>\n      </div>\n\n      {/* Global Settings */}\n      <div className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {success && (\n            <Alert>\n              <AlertDescription>Settings saved successfully!</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Enable/Disable Reminders */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"enabled\"\n                checked={settings.enabled}\n                onCheckedChange={(checked: boolean) =>\n                  setSettings({ ...settings, enabled: checked })\n                }\n              />\n              <Label htmlFor=\"enabled\">Enable Lesson Reminders</Label>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={saveSettings} \n                disabled={saving} \n                size=\"sm\"\n                title={saving ? 'Saving...' : 'Save Settings'}\n              >\n                <Save className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={testReminders}\n                disabled={testingReminders}\n                size=\"sm\"\n                title={testingReminders ? 'Testing...' : 'Test Reminders'}\n              >\n                <Play className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n      {/* Configuration Cards - 3 Column Layout */}\n      {settings.enabled && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {/* Reminder Timing */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Reminder Timing</CardTitle>\n              <CardDescription>When to send reminders</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reminder_time\">Reminder Time</Label>\n                <Input\n                  id=\"reminder_time\"\n                  type=\"time\"\n                  value={settings.reminder_time}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setSettings({ ...settings, reminder_time: e.target.value })\n                  }\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  What time of day should reminders be sent?\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reminder_days_before\">Days Before</Label>\n                <Input\n                  id=\"reminder_days_before\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"7\"\n                  value={settings.reminder_days_before}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setSettings({\n                      ...settings,\n                      reminder_days_before: parseInt(e.target.value) || 2,\n                    })\n                  }\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Send reminders this many days before lesson becomes available\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reminder Limits */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Reminder Limits</CardTitle>\n              <CardDescription>Control reminder frequency and attempts</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"max_reminder_attempts\">Max Attempts</Label>\n                <Input\n                  id=\"max_reminder_attempts\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={settings.max_reminder_attempts}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setSettings({\n                      ...settings,\n                      max_reminder_attempts: parseInt(e.target.value) || 3,\n                    })\n                  }\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Maximum number of reminders per lesson\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reminder_frequency_days\">Frequency (Days)</Label>\n                <Input\n                  id=\"reminder_frequency_days\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"30\"\n                  value={settings.reminder_frequency_days}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setSettings({\n                      ...settings,\n                      reminder_frequency_days: parseInt(e.target.value) || 7,\n                    })\n                  }\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Days between reminder attempts\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Upcoming Lessons */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Upcoming Lessons</CardTitle>\n              <CardDescription>Configure \"coming soon\" notifications</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"include_upcoming\"\n                  checked={settings.include_upcoming_lessons}\n                  onCheckedChange={(checked: boolean) =>\n                    setSettings({ ...settings, include_upcoming_lessons: checked })\n                  }\n                />\n                <Label htmlFor=\"include_upcoming\">Include Upcoming Lessons</Label>\n              </div>\n\n              {settings.include_upcoming_lessons && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"upcoming_days_ahead\">Look Ahead Days</Label>\n                  <Input\n                    id=\"upcoming_days_ahead\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"14\"\n                    value={settings.upcoming_days_ahead}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setSettings({\n                        ...settings,\n                        upcoming_days_ahead: parseInt(e.target.value) || 3,\n                      })\n                    }\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Send \"coming soon\" reminders for lessons available within this many days\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n\n      {/* Information */}\n      <div className=\"pt-6\">\n        <h3 className=\"text-lg font-semibold text-learning-primary mb-2\">How Lesson Reminders Work</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">Understanding the reminder system behavior</p>\n        <ul className=\"text-sm space-y-1 list-disc list-inside text-left\">\n          <li>Reminders are sent automatically based on learning track schedules</li>\n          <li>Uses existing email_notifications system</li>\n          <li>Only active, enrolled users receive reminders</li>\n          <li>Completed lessons won't trigger reminders</li>\n          <li>Users control reminders via their email_preferences (lesson_reminders field)</li>\n          <li>Respects user's quiet hours and email_enabled settings</li>\n          <li>Maximum 3 reminders per lesson with 7-day intervals</li>\n        </ul>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LessonReminderSettings;\n","import React from 'react';\nimport { LessonReminderSettings } from './LessonReminderSettings';\n\n// This component is designed to work in any consuming app\n// It requires the consuming app to pass UI components and Supabase client\ninterface LessonReminderSettingsPageProps {\n  // Required: Supabase client\n  supabaseClient: any;\n  // Required: UI components from the consuming app\n  uiComponents: {\n    Card: any;\n    CardHeader: any;\n    CardTitle: any;\n    CardDescription: any;\n    CardContent: any;\n    Button: any;\n    Switch: any;\n    Input: any;\n    Label: any;\n    Alert: any;\n    AlertDescription: any;\n    Badge?: any;\n    Select?: any;\n    SelectContent?: any;\n    SelectItem?: any;\n    SelectTrigger?: any;\n    SelectValue?: any;\n    Separator?: any;\n    Tabs?: any;\n    TabsContent?: any;\n    TabsList?: any;\n    TabsTrigger?: any;\n  };\n}\n\nexport const LessonReminderSettingsPage: React.FC<LessonReminderSettingsPageProps> = ({\n  supabaseClient,\n  uiComponents\n}) => {\n  return (\n    <LessonReminderSettings\n      supabase={supabaseClient}\n      Card={uiComponents.Card}\n      CardHeader={uiComponents.CardHeader}\n      CardTitle={uiComponents.CardTitle}\n      CardDescription={uiComponents.CardDescription}\n      CardContent={uiComponents.CardContent}\n      Button={uiComponents.Button}\n      Switch={uiComponents.Switch}\n      Input={uiComponents.Input}\n      Label={uiComponents.Label}\n      Alert={uiComponents.Alert}\n      AlertDescription={uiComponents.AlertDescription}\n      Badge={uiComponents.Badge}\n      Select={uiComponents.Select}\n      SelectContent={uiComponents.SelectContent}\n      SelectItem={uiComponents.SelectItem}\n      SelectTrigger={uiComponents.SelectTrigger}\n      SelectValue={uiComponents.SelectValue}\n      Separator={uiComponents.Separator}\n      Tabs={uiComponents.Tabs}\n      TabsContent={uiComponents.TabsContent}\n      TabsList={uiComponents.TabsList}\n      TabsTrigger={uiComponents.TabsTrigger}\n    />\n  );\n};\n\nexport default LessonReminderSettingsPage;"],"names":["forwardRef","createElement","useState","useEffect","jsx","jsxs","error"],"mappings":";;;;;;;AASO,QAAM,gBAAN,MAAM,cAAa;AAAA,IAKhB,cAAc;AAHd;AACA;AAIN,WAAK,YAAY;AACjB,WAAK,cAAc;AAAA,IACrB;AAAA,IAEA,OAAc,cAA4B;AACxC,UAAI,CAAC,cAAa,UAAU;AAC1B,sBAAa,WAAW,IAAI,cAAA;AAAA,MAC9B;AACA,aAAO,cAAa;AAAA,IACtB;AAAA,IAEA,OAAc,UAAU,QAGf;AACP,oBAAa,YAAA,EAAc,YAAY,OAAO;AAC9C,UAAI,OAAO,WAAW;AACpB,sBAAa,YAAA,EAAc,cAAc,OAAO;AAAA,MAClD;AAAA,IACF;AAAA,IAEA,MAAM,UAAU,WAAsB,gBAAyF;AAE7H,UAAI;AAEF,YAAI,gBAAgB;AAClB,gBAAM,EAAE,MAAM,MAAA,IAAU,MAAM,eAAe,UAAU,OAAO,cAAc;AAAA,YAC1E,MAAM;AAAA,cACJ,IAAI,UAAU;AAAA,cACd,SAAS,UAAU;AAAA,cACnB,MAAM,UAAU;AAAA;AAAA,YAAA;AAAA,UAClB,CACD;AAED,cAAI,OAAO;AACT,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,OAAO,MAAM,WAAW;AAAA,YAAA;AAAA,UAE5B;AAEA,cAAI,QAAQ,KAAK,SAAS;AACxB,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,WAAW,KAAK;AAAA,YAAA;AAAA,UAEpB,OAAO;AACL,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,QAAO,6BAAM,UAAS;AAAA,YAAA;AAAA,UAE1B;AAAA,QACF,OAAO;AAEL,gBAAM,cAAmD;AACzD,gBAAM,cAAc;AAEpB,cAAI,CAAC,aAAa;AAChB,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,OAAO;AAAA,YAAA;AAAA,UAEX;AAEA,gBAAM,WAAW,MAAM,MAAM,GAAG,WAAW,4BAA4B;AAAA,YACrE,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,gBAAgB;AAAA,cAChB,iBAAiB,UAAU,WAAW;AAAA,YAAA;AAAA,YAExC,MAAM,KAAK,UAAU;AAAA,cACnB,IAAI,UAAU;AAAA,cACd,SAAS,UAAU;AAAA,cACnB,MAAM,UAAU;AAAA,YAAA,CACjB;AAAA,UAAA,CACF;AAED,gBAAM,SAAS,MAAM,SAAS,KAAA;AAE9B,cAAI,SAAS,MAAM,OAAO,SAAS;AACjC,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,WAAW,OAAO;AAAA,YAAA;AAAA,UAEtB,OAAO;AACL,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,OAAO,OAAO,SAAS;AAAA,YAAA;AAAA,UAE3B;AAAA,QACF;AAAA,MACF,SAAS,OAAY;AACnB,gBAAQ,MAAM,wBAAwB,KAAK;AAC3C,eAAO;AAAA,UACL,SAAS;AAAA,UACT,OAAO,MAAM,WAAW;AAAA,QAAA;AAAA,MAE5B;AAAA,IACF;AAAA;AAAA,IAGA,MAAM,mBAAmB,IAAY,aAAqB,eAAuB,gBAAyF;AACxK,YAAM,UAAU,aAAa,WAAW;AACxC,YAAM,WAAW;AAAA;AAAA;AAAA;AAAA,kEAI6C,WAAW,8CAA8C,aAAa;AAAA;AAAA;AAAA;AAAA,uCAIjG,WAAW;AAAA,sCACZ,aAAa;AAAA;AAAA;AAAA;AAAA;AAM/C,aAAO,KAAK,UAAU;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MAAA,GACC,cAAc;AAAA,IACnB;AAAA;AAAA,IAGA,MAAM,oBAAoB,IAAY,UAAkB,SAAiB,gBAAyF;AAChK,YAAM,UAAU,aAAa,QAAQ;AACrC,YAAM,WAAW;AAAA;AAAA;AAAA;AAAA,uDAIkC,QAAQ,+BAA+B,OAAO;AAAA;AAAA;AAAA;AAAA,sCAI/D,QAAQ;AAAA,0CACJ,OAAO;AAAA;AAAA;AAAA;AAAA;AAM7C,aAAO,KAAK,UAAU;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MAAA,GACC,cAAc;AAAA,IACnB;AAAA;AAAA,IAGA,MAAM,qBAAqB,IAAY,kBAA0B,wBAAgC,gBAAyF;AACxL,YAAM,UAAU,mCAAmC,gBAAgB;AACnE,YAAM,WAAW;AAAA;AAAA;AAAA;AAAA,iEAI4C,gBAAgB;AAAA;AAAA;AAAA,uCAG1C,gBAAgB;AAAA,6CACV,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAO/D,aAAO,KAAK,UAAU;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MAAA,GACC,cAAc;AAAA,IACnB;AAAA;AAAA,IAGA,MAAM,0BAA0B,IAAY,YAAoB,gBAAyF;AACvJ,YAAM,UAAU,qCAAqC,UAAU;AAC/D,YAAM,WAAW;AAAA;AAAA;AAAA;AAAA,mDAI8B,UAAU;AAAA;AAAA;AAAA,wCAGrB,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9C,aAAO,KAAK,UAAU;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MAAA,GACC,cAAc;AAAA,IACnB;AAAA;AAAA,IAGA,MAAM,gBAAgB,IAAY,YAAoB,cAAsB,gBAAyF;AACnK,YAAM,UAAU,iBAAiB,UAAU;AAC3C,YAAM,WAAW;AAAA;AAAA;AAAA;AAAA,kEAI6C,UAAU;AAAA;AAAA;AAAA,uCAGrC,UAAU;AAAA,yCACR,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjD,aAAO,KAAK,UAAU;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MAAA,GACC,cAAc;AAAA,IACnB;AAAA,EACF;AAtOE,gBADW,eACI;AADV,MAAM,eAAN;AAyOA,QAAM,eAAe,aAAa,YAAA;AAAA,EClPzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,QAAM,cAAc,CAAC,WAAW,OAAO,QAAQ,sBAAsB,OAAO,EAAE,YAAW;AACzF,QAAM,eAAe,IAAI,YAAY,QAAQ,OAAO,CAAC,WAAW,OAAO,UAAU;AAC/E,WAAO,QAAQ,SAAS,KAAK,UAAU,KAAI,MAAO,MAAM,MAAM,QAAQ,SAAS,MAAM;AAAA,EACvF,CAAC,EAAE,KAAK,GAAG,EAAE,KAAI;AAAA,ECVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,MAAI,oBAAoB;AAAA,IACtB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,eAAe;AAAA,IACf,gBAAgB;AAAA,EAClB;AAAA,ECjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,QAAM,OAAOA,MAAAA;AAAAA,IACX,CAAC;AAAA,MACC,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,cAAc;AAAA,MACd;AAAA,MACA,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACP,GAAK,QAAQ;AACT,aAAOC,MAAAA;AAAAA,QACL;AAAA,QACA;AAAA,UACE;AAAA,UACA,GAAG;AAAA,UACH,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa,sBAAsB,OAAO,WAAW,IAAI,KAAK,OAAO,IAAI,IAAI;AAAA,UAC7E,WAAW,aAAa,UAAU,SAAS;AAAA,UAC3C,GAAG;AAAA,QACX;AAAA,QACM;AAAA,UACE,GAAG,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK,MAAMA,MAAAA,cAAc,KAAK,KAAK,CAAC;AAAA,UAC3D,GAAG,MAAM,QAAQ,QAAQ,IAAI,WAAW,CAAC,QAAQ;AAAA,QACzD;AAAA,MACA;AAAA,IACE;AAAA,EACF;AAAA,ECxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,QAAM,mBAAmB,CAAC,UAAU,aAAa;AAC/C,UAAM,YAAYD,MAAAA;AAAAA,MAChB,CAAC,EAAE,WAAW,GAAG,MAAK,GAAI,QAAQC,MAAAA,cAAc,MAAM;AAAA,QACpD;AAAA,QACA;AAAA,QACA,WAAW,aAAa,UAAU,YAAY,QAAQ,CAAC,IAAI,SAAS;AAAA,QACpE,GAAG;AAAA,MACT,CAAK;AAAA,IACL;AACE,cAAU,cAAc,GAAG,QAAQ;AACnC,WAAO;AAAA,EACT;AAAA,ECtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,QAAM,OAAO,iBAAiB,QAAQ;AAAA,IACpC,CAAC,QAAQ,EAAE,OAAO,MAAM,QAAQ,MAAM,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,SAAQ,CAAE;AAAA,IAC9E,CAAC,QAAQ,EAAE,GAAG,6CAA6C,KAAK,SAAQ,CAAE;AAAA,EAC5E,CAAC;AAAA,ECZD;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,QAAM,OAAO,iBAAiB,QAAQ;AAAA,IACpC,CAAC,WAAW,EAAE,QAAQ,sBAAsB,KAAK,SAAQ,CAAE;AAAA,EAC7D,CAAC;AAAA,ECXD;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,QAAM,OAAO,iBAAiB,QAAQ;AAAA,IACpC;AAAA,MACE;AAAA,MACA;AAAA,QACE,GAAG;AAAA,QACH,KAAK;AAAA,MACX;AAAA,IACA;AAAA,IACE,CAAC,QAAQ,EAAE,GAAG,6CAA6C,KAAK,SAAQ,CAAE;AAAA,IAC1E,CAAC,QAAQ,EAAE,GAAG,0BAA0B,KAAK,SAAQ,CAAE;AAAA,EACzD,CAAC;AAAA,ECnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,QAAM,OAAO,iBAAiB,QAAQ;AAAA,IACpC;AAAA,MACE;AAAA,MACA;AAAA,QACE,GAAG;AAAA,QACH,KAAK;AAAA,MACX;AAAA,IACA;AAAA,IACE,CAAC,QAAQ,EAAE,GAAG,8BAA8B,KAAK,SAAQ,CAAE;AAAA,EAC7D,CAAC;AC6BM,QAAM,qBAAwD,CAAC;AAAA,IACpE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,MAAM;AACJ,UAAM,CAAC,aAAa,cAAc,IAAIC,MAAAA,SAAkC,IAAI;AAC5E,UAAM,CAAC,SAAS,UAAU,IAAIA,MAAAA,SAAS,IAAI;AAC3C,UAAM,CAAC,SAAS,UAAU,IAAIA,MAAAA,SAAS,KAAK;AAC5C,UAAM,CAAC,eAAe,gBAAgB,IAAIA,MAAAA,SAAiB,cAAc;AAGzEC,UAAAA,UAAU,MAAM;AACd,UAAI,WAAW;AACb,qBAAa,UAAU,SAAS;AAAA,MAClC;AAAA,IACF,GAAG,CAAC,SAAS,CAAC;AAGdA,UAAAA,UAAU,MAAM;AACd,UAAI,MAAM;AACR,wBAAA;AAAA,MACF;AAAA,IACF,GAAG,CAAC,IAAI,CAAC;AAET,UAAM,kBAAkB,YAAY;AAClC,UAAI;AACF,cAAM,EAAE,MAAM,MAAA,IAAU,MAAM,SAC3B,KAAK,mBAAmB,EACxB,OAAO,GAAG,EACV,GAAG,WAAW,6BAAM,EAAE,EACtB,OAAA;AAEH,YAAI,SAAS,MAAM,SAAS,YAAY;AACtC,kBAAQ,MAAM,8BAA8B,KAAK;AACjD;AAAA,QACF;AAEA,YAAI,MAAM;AACR,yBAAe,IAAI;AAAA,QACrB,OAAO;AAEL,gBAAM,eAAiC;AAAA,YACrC,SAAQ,6BAAM,OAAM;AAAA,YACpB,cAAc;AAAA,YACd,iBAAiB;AAAA,YACjB,cAAc;AAAA,YACd,cAAc;AAAA,YACd,cAAc;AAAA,YACd,mBAAmB;AAAA,YACnB,mBAAmB;AAAA,YACnB,iBAAiB;AAAA,YACjB,eAAe;AAAA,UAAA;AAEjB,gBAAM,kBAAkB,YAAY;AACpC,yBAAe,YAAY;AAAA,QAC7B;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,8BAA8B,KAAK;AAAA,MACnD,UAAA;AACE,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,oBAAoB,OAAO,UAA4B;AAC3D,YAAM,EAAE,UAAU,MAAM,SACrB,KAAK,mBAAmB,EACxB,OAAO;AAAA,QACN,SAAS,MAAM;AAAA,QACf,eAAe,MAAM;AAAA,QACrB,kBAAkB,MAAM;AAAA,QACxB,gBAAgB,MAAM;AAAA,QACtB,eAAe,MAAM;AAAA,QACrB,cAAc,MAAM;AAAA,QACpB,oBAAoB,MAAM;AAAA,QAC1B,qBAAqB,MAAM;AAAA,QAC3B,mBAAmB,MAAM;AAAA,QACzB,iBAAiB,MAAM;AAAA,MAAA,CACxB;AAEH,UAAI,OAAO;AACT,gBAAQ,MAAM,+BAA+B,KAAK;AAAA,MACpD;AAAA,IACF;AAEA,UAAM,oBAAoB,OAAO,YAAuC;AACtE,YAAM,eAAe;AAAA,QACnB,GAAG;AAAA,QACH,GAAG;AAAA,QACH,QAAQ,KAAK;AAAA;AAAA,MAAA;AAEf,qBAAe,YAAY;AAI3B,YAAM,EAAE,UAAU,MAAM,SACrB,KAAK,mBAAmB,EACxB,OAAO;AAAA,QACN,SAAS,KAAK;AAAA;AAAA,QACd,eAAe,aAAa;AAAA,QAC5B,kBAAkB,aAAa;AAAA,QAC/B,gBAAgB,aAAa;AAAA,QAC7B,eAAe,aAAa;AAAA,QAC5B,cAAc,aAAa;AAAA,QAC3B,oBAAoB,aAAa;AAAA,QACjC,qBAAqB,aAAa;AAAA,QAClC,mBAAmB,aAAa;AAAA,QAChC,iBAAiB,aAAa;AAAA,MAAA,CAC/B;AAEH,UAAI,OAAO;AACT,gBAAQ,MAAM,+BAA+B,KAAK;AAAA,MACpD;AAAA,IACF;AAGA,UAAM,gBAAgB,YAAY;AAChC,cAAQ,IAAI,kCAAkC,IAAI;AAClD,cAAQ,IAAI,eAAe,YAAY;AAAA,QACrC,WAAW,UAAU,YAAY,eAAe;AAAA,QAChD,WAAW,UAAU;AAAA,MAAA,IACnB,cAAc;AAClB,UAAI,CAAC,QAAQ,CAAC,KAAK,OAAO;AACxB,gBAAQ,IAAI,0BAA0B,EAAE,MAAM,OAAO,6BAAM,OAAO;AAClE;AAAA,MACF;AAEA,iBAAW,IAAI;AACf,UAAI;AACF,YAAI;AAGJ,gBAAQ,eAAA;AAAA,UACN,KAAK;AACH,0BAAc,MAAM,aAAa;AAAA,cAC/B,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,YAAA;AAEF;AAAA,UACF,KAAK;AACH,0BAAc,MAAM,aAAa;AAAA,cAC/B,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,YAAA;AAEF;AAAA,UACF,KAAK;AACH,0BAAc,MAAM,aAAa;AAAA,cAC/B,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,YAAA;AAEF;AAAA,UACF,KAAK;AACH,0BAAc,MAAM,aAAa;AAAA,cAC/B,KAAK;AAAA,cACL;AAAA,cACA;AAAA,YAAA;AAEF;AAAA,UACF,KAAK;AAAA,UACL;AACE,0BAAc,MAAM,aAAa;AAAA,cAC/B,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,YAAA;AAEF;AAAA,QAAA;AAGJ,YAAI,YAAY,SAAS;AAEvB,gBAAM,EAAE,UAAU,MAAM,SACrB,KAAK,qBAAqB,EAC1B,OAAO;AAAA,YACN,SAAS,KAAK;AAAA,YACd,MAAM;AAAA,YACN,OAAO;AAAA,YACP,SAAS,QAAQ,aAAa;AAAA,YAC9B,OAAO,KAAK;AAAA,YACZ,QAAQ;AAAA,UAAA,CACT;AAEH,cAAI,OAAO;AACT,oBAAQ,MAAM,8BAA8B,KAAK;AAAA,UACnD;AAEA,gBAAM,+BAA+B;AAAA,QACvC,OAAO;AACL,gBAAM,yBAAyB,YAAY,KAAK,EAAE;AAAA,QACpD;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,6BAA6B,KAAK;AAChD,cAAM,6DAA6D;AAAA,MACrE,UAAA;AACE,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAEA,QAAI,SAAS;AACX,aACEC,+BAAC,SAAI,WAAU,wCACb,yCAAC,OAAA,EAAI,WAAU,wEAAuE,EAAA,CACxF;AAAA,IAEJ;AAEA,WACEC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,MAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,QAAAD,2BAAAA,IAAC,MAAA,EAAK,WAAU,gCAAA,CAAgC;AAAA,QAChDA,2BAAAA,IAAC,MAAA,EAAG,WAAU,4CAA2C,UAAA,oBAAA,CAAiB;AAAA,MAAA,GAC5E;AAAA,MAGAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aAEX,UAAA;AAAA,QAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,UAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,YAAAD,2BAAAA,IAAC,OAAA,EAAM,SAAQ,iBAAgB,UAAA,8BAA0B;AAAA,YACzDA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,kCAAA,CAE7C;AAAA,UAAA,GACF;AAAA,UACAA,2BAAAA;AAAAA,YAAC;AAAA,YAAA;AAAA,cACC,IAAG;AAAA,cACH,UAAS,2CAAa,iBAAgB;AAAA,cACtC,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,cAAc,SAAS;AAAA,YAAA;AAAA,UAAA;AAAA,QAC3E,GACF;AAAA,SAGC,2CAAa,iBACZC,gCAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,UAAAD,2BAAAA,IAAC,MAAA,EAAG,WAAU,eAAc,UAAA,sBAAkB;AAAA,UAE9CC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,YAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,OAAA,EAAM,WAAU,aAAY,UAAA,oBAAgB;AAAA,cAC7CA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,UAAS,2CAAa,oBAAmB;AAAA,kBACzC,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,iBAAiB,SAAS;AAAA,gBAAA;AAAA,cAAA;AAAA,YAC9E,GACF;AAAA,YAEAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,OAAA,EAAM,WAAU,aAAY,UAAA,kBAAc;AAAA,cAC3CA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,UAAS,2CAAa,iBAAgB;AAAA,kBACtC,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,cAAc,SAAS;AAAA,gBAAA;AAAA,cAAA;AAAA,YAC3E,GACF;AAAA,YAEAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,OAAA,EAAM,WAAU,aAAY,UAAA,iBAAa;AAAA,cAC1CA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,UAAS,2CAAa,iBAAgB;AAAA,kBACtC,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,cAAc,SAAS;AAAA,gBAAA;AAAA,cAAA;AAAA,YAC3E,GACF;AAAA,YAEAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,OAAA,EAAM,WAAU,aAAY,UAAA,gBAAY;AAAA,cACzCA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,UAAS,2CAAa,iBAAgB;AAAA,kBACtC,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,cAAc,SAAS;AAAA,gBAAA;AAAA,cAAA;AAAA,YAC3E,GACF;AAAA,YAEAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,OAAA,EAAM,WAAU,aAAY,UAAA,sBAAkB;AAAA,cAC/CA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,UAAS,2CAAa,sBAAqB;AAAA,kBAC3C,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,mBAAmB,SAAS;AAAA,gBAAA;AAAA,cAAA;AAAA,YAChF,EAAA,CACF;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GACF;AAAA,QAIFC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,UAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,YAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,SAAM,UAAA,cAAA,CAAW;AAAA,cAClBA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,uCAAA,CAE7C;AAAA,YAAA,GACF;AAAA,YACAA,2BAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,UAAS,2CAAa,sBAAqB;AAAA,gBAC3C,iBAAiB,CAAC,YAAY,kBAAkB,EAAE,mBAAmB,SAAS;AAAA,cAAA;AAAA,YAAA;AAAA,UAChF,GACF;AAAA,WAEC,2CAAa,sBACZC,gCAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAAA,gCAAC,OAAA,EACC,UAAA;AAAA,cAAAD,2BAAAA,IAAC,SAAM,UAAA,aAAA,CAAU;AAAA,cACjBA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,MAAK;AAAA,kBACL,QAAO,2CAAa,oBAAmB;AAAA,kBACvC,UAAU,CAAC,MAAM,kBAAkB,EAAE,iBAAiB,EAAE,OAAO,MAAA,CAAO;AAAA,gBAAA;AAAA,cAAA;AAAA,YACxE,GACF;AAAA,4CACC,OAAA,EACC,UAAA;AAAA,cAAAA,2BAAAA,IAAC,SAAM,UAAA,WAAA,CAAQ;AAAA,cACfA,2BAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,MAAK;AAAA,kBACL,QAAO,2CAAa,kBAAiB;AAAA,kBACrC,UAAU,CAAC,MAAM,kBAAkB,EAAE,eAAe,EAAE,OAAO,MAAA,CAAO;AAAA,gBAAA;AAAA,cAAA;AAAA,YACtE,EAAA,CACF;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GAEJ;AAAA,QAGAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,UAAAD,2BAAAA,IAAC,MAAA,EAAG,WAAU,eAAc,UAAA,4BAAwB;AAAA,UACpDC,2BAAAA,KAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,UACb,UAAA;AAAA,cAAAD,2BAAAA,IAAC,SAAM,UAAA,aAAA,CAAU;AAAA,cACjBC,2BAAAA,KAAC,QAAA,EAAO,OAAO,eAAe,eAAe,kBAC3C,UAAA;AAAA,gBAAAD,2BAAAA,IAAC,eAAA,EACC,UAAAA,2BAAAA,IAAC,aAAA,CAAA,CAAY,GACf;AAAA,gDACC,eAAA,EACC,UAAA;AAAA,kBAAAA,2BAAAA,IAAC,YAAA,EAAW,OAAM,gBAAe,UAAA,gBAAY;AAAA,kBAC7CA,2BAAAA,IAAC,YAAA,EAAW,OAAM,mBAAkB,UAAA,mBAAe;AAAA,kBACnDA,2BAAAA,IAAC,YAAA,EAAW,OAAM,YAAW,UAAA,iBAAa;AAAA,kBAC1CA,2BAAAA,IAAC,YAAA,EAAW,OAAM,eAAc,UAAA,eAAW;AAAA,kBAC3CA,2BAAAA,IAAC,YAAA,EAAW,OAAM,qBAAoB,UAAA,oBAAA,CAAiB;AAAA,gBAAA,EAAA,CACzD;AAAA,cAAA,EAAA,CACF;AAAA,YAAA,GACF;AAAA,YACAC,2BAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,SAAS;AAAA,gBACT,UAAU,WAAW,EAAC,2CAAa;AAAA,gBACnC,WAAU;AAAA,gBAET,UAAA;AAAA,kBAAA,UACCD,2BAAAA,IAAC,SAAI,WAAU,4DAAA,CAA4D,IAE3EA,2BAAAA,IAAC,MAAA,EAAK,WAAU,UAAA,CAAU;AAAA,kBAC1B;AAAA,gBAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAEJ,EAAA,CACF;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,EAAA,CACF;AAAA,IAAA,GACF;AAAA,EAEN;ACpYO,QAAM,yBAAgE,CAAC;AAAA,IAC5E;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,cAAc;AAAA,IACd,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,mBAAmB;AAAA,EACrB,MAAM;AACJ,UAAM,CAAC,UAAU,WAAW,IAAIF,eAA2B;AAAA,MACzD,SAAS;AAAA,MACT,sBAAsB;AAAA,MACtB,eAAe;AAAA,MACf,0BAA0B;AAAA,MAC1B,qBAAqB;AAAA,MACrB,uBAAuB;AAAA,MACvB,yBAAyB;AAAA,IAAA,CAC1B;AACD,UAAM,CAAC,SAAS,UAAU,IAAIA,MAAAA,SAAS,IAAI;AAC3C,UAAM,CAAC,QAAQ,SAAS,IAAIA,MAAAA,SAAS,KAAK;AAC1C,UAAM,CAAC,OAAO,QAAQ,IAAIA,MAAAA,SAAwB,IAAI;AACtD,UAAM,CAAC,SAAS,UAAU,IAAIA,MAAAA,SAAS,KAAK;AAC5C,UAAM,CAAC,kBAAkB,mBAAmB,IAAIA,MAAAA,SAAS,KAAK;AAE9DC,UAAAA,UAAU,MAAM;AACd,mBAAA;AAAA,IACF,GAAG,CAAA,CAAE;AAEL,UAAM,eAAe,YAAY;AAC/B,UAAI;AACF,mBAAW,IAAI;AACf,iBAAS,IAAI;AAGb,cAAM,EAAE,MAAM,OAAO,WAAA,IAAe,MAAM,SACvC,KAAK,wBAAwB,EAC7B,OAAO,GAAG,EACV,GAAG,MAAM,sCAAsC,EAC/C,OAAA;AAEH,YAAI,YAAY;AACd,kBAAQ,MAAM,oCAAoC,UAAU;AAC5D,gBAAM;AAAA,QACR;AAEA,YAAI,MAAM;AACR,sBAAY;AAAA,YACV,IAAI,KAAK;AAAA,YACT,SAAS,KAAK;AAAA,YACd,sBAAsB,KAAK;AAAA,YAC3B,eAAe,KAAK;AAAA,YACpB,0BAA0B,KAAK;AAAA,YAC/B,qBAAqB,KAAK;AAAA,YAC1B,uBAAuB,KAAK,yBAAyB;AAAA,YACrD,yBAAyB,KAAK,2BAA2B;AAAA,UAAA,CAC1D;AAAA,QACH;AAAA,MACF,SAAS,KAAU;AACjB,iBAAS,IAAI,WAAW,kCAAkC;AAAA,MAC5D,UAAA;AACE,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,eAAe,YAAY;AAC/B,UAAI;AACF,kBAAU,IAAI;AACd,iBAAS,IAAI;AACb,mBAAW,KAAK;AAGhB,cAAM,EAAE,OAAO,gBAAgB,MAAM,SAClC,KAAK,wBAAwB,EAC7B,OAAO;AAAA,UACN,SAAS,SAAS;AAAA,UAClB,sBAAsB,SAAS;AAAA,UAC/B,eAAe,SAAS;AAAA,UACxB,0BAA0B,SAAS;AAAA,UACnC,qBAAqB,SAAS;AAAA,UAC9B,uBAAuB,SAAS;AAAA,UAChC,yBAAyB,SAAS;AAAA,UAClC,aAAY,oBAAI,KAAA,GAAO,YAAA;AAAA,QAAY,CACpC,EACA,GAAG,MAAM,sCAAsC;AAElD,YAAI,YAAa,OAAM;AAEvB,mBAAW,IAAI;AACf,mBAAW,MAAM,WAAW,KAAK,GAAG,GAAI;AAAA,MAC1C,SAAS,KAAU;AACjB,gBAAQ,MAAM,mCAAmC,GAAG;AACpD,iBAAS,IAAI,WAAW,kCAAkC;AAAA,MAC5D,UAAA;AACE,kBAAU,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,UAAM,gBAAgB,YAAY;AAChC,UAAI;AACF,4BAAoB,IAAI;AACxB,iBAAS,IAAI;AAGb,cAAM,EAAE,MAAM,UAAU,OAAO,cAAc,MAAM,SAChD,IAAI,0BAA0B;AAEjC,YAAI,WAAW;AACb,gBAAM;AAAA,QACR;AAEA,gBAAQ,IAAI,4BAA4B,QAAQ;AAGhD,cAAM,EAAE,MAAM,OAAAG,OAAAA,IAAU,MAAM,SAAS,UAAU,OAAO,yBAAyB;AAAA,UAC/E,MAAM;AAAA,YACJ,WAAW;AAAA,UAAA;AAAA,QACb,CACD;AAED,YAAIA,QAAO;AACT,gBAAMA;AAAAA,QACR;AAEA,gBAAQ,IAAI,2BAA2B,IAAI;AAC3C,cAAM,+BAA8B,6BAAM,cAAa,CAAC,YAAW,6BAAM,SAAQ,CAAC,EAAE;AAAA,MACtF,SAAS,KAAU;AACjB,gBAAQ,MAAM,4BAA4B,GAAG;AAC7C,iBAAS,IAAI,WAAW,0BAA0B;AAAA,MACpD,UAAA;AACE,4BAAoB,KAAK;AAAA,MAC3B;AAAA,IACF;AAEA,QAAI,SAAS;AACX,aACEF,2BAAAA,IAAC,QACC,UAAAA,2BAAAA,IAAC,aAAA,EACC,yCAAC,KAAA,EAAE,UAAA,+BAAA,CAA4B,GACjC,EAAA,CACF;AAAA,IAEJ;AAEA,WACEC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aAEb,UAAA;AAAA,MAAAD,2BAAAA,IAAC,OAAA,EAAI,WAAU,2BACb,UAAAA,2BAAAA,IAAC,QAAG,WAAU,4CAA2C,sCAAwB,EAAA,CACnF;AAAA,MAGAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACV,UAAA;AAAA,QAAA,wCACE,OAAA,EAAM,SAAQ,eACb,UAAAD,2BAAAA,IAAC,kBAAA,EAAkB,iBAAM,EAAA,CAC3B;AAAA,QAGD,WACCA,2BAAAA,IAAC,OAAA,EACC,UAAAA,2BAAAA,IAAC,kBAAA,EAAiB,0CAA4B,GAChD;AAAA,QAIFC,2BAAAA,KAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,UAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,+BACb,UAAA;AAAA,YAAAD,2BAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,IAAG;AAAA,gBACH,SAAS,SAAS;AAAA,gBAClB,iBAAiB,CAAC,YAChB,YAAY,EAAE,GAAG,UAAU,SAAS,QAAA,CAAS;AAAA,cAAA;AAAA,YAAA;AAAA,YAGjDA,2BAAAA,IAAC,OAAA,EAAM,SAAQ,WAAU,UAAA,0BAAA,CAAuB;AAAA,UAAA,GAClD;AAAA,UAGAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,YAAAD,2BAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,SAAS;AAAA,gBACT,UAAU;AAAA,gBACV,MAAK;AAAA,gBACL,OAAO,SAAS,cAAc;AAAA,gBAE9B,UAAAA,2BAAAA,IAAC,MAAA,EAAK,WAAU,UAAA,CAAU;AAAA,cAAA;AAAA,YAAA;AAAA,YAG5BA,2BAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,SAAQ;AAAA,gBACR,SAAS;AAAA,gBACT,UAAU;AAAA,gBACV,MAAK;AAAA,gBACL,OAAO,mBAAmB,eAAe;AAAA,gBAEzC,UAAAA,2BAAAA,IAAC,MAAA,EAAK,WAAU,UAAA,CAAU;AAAA,cAAA;AAAA,YAAA;AAAA,UAC5B,EAAA,CACF;AAAA,QAAA,GACF;AAAA,QAGH,SAAS,WACRC,gCAAC,OAAA,EAAI,WAAU,yCAEb,UAAA;AAAA,UAAAA,gCAAC,MAAA,EACC,UAAA;AAAA,YAAAA,gCAAC,YAAA,EACC,UAAA;AAAA,cAAAD,2BAAAA,IAAC,aAAU,UAAA,kBAAA,CAAe;AAAA,cAC1BA,2BAAAA,IAAC,mBAAgB,UAAA,yBAAA,CAAsB;AAAA,YAAA,GACzC;AAAA,YACAC,2BAAAA,KAAC,aAAA,EAAY,WAAU,aACrB,UAAA;AAAA,cAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,gBAAAD,2BAAAA,IAAC,OAAA,EAAM,SAAQ,iBAAgB,UAAA,iBAAa;AAAA,gBAC5CA,2BAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAG;AAAA,oBACH,MAAK;AAAA,oBACL,OAAO,SAAS;AAAA,oBAChB,UAAU,CAAC,MACT,YAAY,EAAE,GAAG,UAAU,eAAe,EAAE,OAAO,MAAA,CAAO;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAG9DA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,6CAAA,CAE7C;AAAA,cAAA,GACF;AAAA,cAEAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,gBAAAD,2BAAAA,IAAC,OAAA,EAAM,SAAQ,wBAAuB,UAAA,eAAW;AAAA,gBACjDA,2BAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAG;AAAA,oBACH,MAAK;AAAA,oBACL,KAAI;AAAA,oBACJ,KAAI;AAAA,oBACJ,OAAO,SAAS;AAAA,oBAChB,UAAU,CAAC,MACT,YAAY;AAAA,sBACV,GAAG;AAAA,sBACH,sBAAsB,SAAS,EAAE,OAAO,KAAK,KAAK;AAAA,oBAAA,CACnD;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAGLA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,gEAAA,CAE7C;AAAA,cAAA,EAAA,CACF;AAAA,YAAA,EAAA,CACF;AAAA,UAAA,GACF;AAAA,0CAGC,MAAA,EACC,UAAA;AAAA,YAAAC,gCAAC,YAAA,EACC,UAAA;AAAA,cAAAD,2BAAAA,IAAC,aAAU,UAAA,kBAAA,CAAe;AAAA,cAC1BA,2BAAAA,IAAC,mBAAgB,UAAA,0CAAA,CAAuC;AAAA,YAAA,GAC1D;AAAA,YACAC,2BAAAA,KAAC,aAAA,EAAY,WAAU,aACrB,UAAA;AAAA,cAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,gBAAAD,2BAAAA,IAAC,OAAA,EAAM,SAAQ,yBAAwB,UAAA,gBAAY;AAAA,gBACnDA,2BAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAG;AAAA,oBACH,MAAK;AAAA,oBACL,KAAI;AAAA,oBACJ,KAAI;AAAA,oBACJ,OAAO,SAAS;AAAA,oBAChB,UAAU,CAAC,MACT,YAAY;AAAA,sBACV,GAAG;AAAA,sBACH,uBAAuB,SAAS,EAAE,OAAO,KAAK,KAAK;AAAA,oBAAA,CACpD;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAGLA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,yCAAA,CAE7C;AAAA,cAAA,GACF;AAAA,cAEAC,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,gBAAAD,2BAAAA,IAAC,OAAA,EAAM,SAAQ,2BAA0B,UAAA,oBAAgB;AAAA,gBACzDA,2BAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAG;AAAA,oBACH,MAAK;AAAA,oBACL,KAAI;AAAA,oBACJ,KAAI;AAAA,oBACJ,OAAO,SAAS;AAAA,oBAChB,UAAU,CAAC,MACT,YAAY;AAAA,sBACV,GAAG;AAAA,sBACH,yBAAyB,SAAS,EAAE,OAAO,KAAK,KAAK;AAAA,oBAAA,CACtD;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAGLA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,iCAAA,CAE7C;AAAA,cAAA,EAAA,CACF;AAAA,YAAA,EAAA,CACF;AAAA,UAAA,GACF;AAAA,0CAGC,MAAA,EACC,UAAA;AAAA,YAAAC,gCAAC,YAAA,EACC,UAAA;AAAA,cAAAD,2BAAAA,IAAC,aAAU,UAAA,mBAAA,CAAgB;AAAA,cAC3BA,2BAAAA,IAAC,mBAAgB,UAAA,wCAAA,CAAqC;AAAA,YAAA,GACxD;AAAA,YACAC,2BAAAA,KAAC,aAAA,EAAY,WAAU,aACrB,UAAA;AAAA,cAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,+BACb,UAAA;AAAA,gBAAAD,2BAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAG;AAAA,oBACH,SAAS,SAAS;AAAA,oBAClB,iBAAiB,CAAC,YAChB,YAAY,EAAE,GAAG,UAAU,0BAA0B,QAAA,CAAS;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAGlEA,2BAAAA,IAAC,OAAA,EAAM,SAAQ,oBAAmB,UAAA,2BAAA,CAAwB;AAAA,cAAA,GAC5D;AAAA,cAEC,SAAS,4BACRC,gCAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,gBAAAD,2BAAAA,IAAC,OAAA,EAAM,SAAQ,uBAAsB,UAAA,mBAAe;AAAA,gBACpDA,2BAAAA;AAAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAG;AAAA,oBACH,MAAK;AAAA,oBACL,KAAI;AAAA,oBACJ,KAAI;AAAA,oBACJ,OAAO,SAAS;AAAA,oBAChB,UAAU,CAAC,MACT,YAAY;AAAA,sBACV,GAAG;AAAA,sBACH,qBAAqB,SAAS,EAAE,OAAO,KAAK,KAAK;AAAA,oBAAA,CAClD;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAGLA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,2EAAA,CAE7C;AAAA,cAAA,EAAA,CACF;AAAA,YAAA,EAAA,CAEJ;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GACF;AAAA,QAKFC,2BAAAA,KAAC,OAAA,EAAI,WAAU,QACb,UAAA;AAAA,UAAAD,2BAAAA,IAAC,MAAA,EAAG,WAAU,oDAAmD,UAAA,6BAAyB;AAAA,UAC1FA,2BAAAA,IAAC,KAAA,EAAE,WAAU,sCAAqC,UAAA,8CAA0C;AAAA,UAC5FC,2BAAAA,KAAC,MAAA,EAAG,WAAU,qDACZ,UAAA;AAAA,YAAAD,2BAAAA,IAAC,QAAG,UAAA,qEAAA,CAAkE;AAAA,YACtEA,2BAAAA,IAAC,QAAG,UAAA,2CAAA,CAAwC;AAAA,YAC5CA,2BAAAA,IAAC,QAAG,UAAA,gDAAA,CAA6C;AAAA,YACjDA,2BAAAA,IAAC,QAAG,UAAA,4CAAA,CAAyC;AAAA,YAC7CA,2BAAAA,IAAC,QAAG,UAAA,+EAAA,CAA4E;AAAA,YAChFA,2BAAAA,IAAC,QAAG,UAAA,yDAAA,CAAsD;AAAA,YAC1DA,2BAAAA,IAAC,QAAG,UAAA,sDAAA,CAAmD;AAAA,UAAA,EAAA,CACzD;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,EAAA,CACA;AAAA,IAAA,GACF;AAAA,EAEJ;ACvWO,QAAM,6BAAwE,CAAC;AAAA,IACpF;AAAA,IACA;AAAA,EACF,MAAM;AACJ,WACEA,2BAAAA;AAAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAU;AAAA,QACV,MAAM,aAAa;AAAA,QACnB,YAAY,aAAa;AAAA,QACzB,WAAW,aAAa;AAAA,QACxB,iBAAiB,aAAa;AAAA,QAC9B,aAAa,aAAa;AAAA,QAC1B,QAAQ,aAAa;AAAA,QACrB,QAAQ,aAAa;AAAA,QACrB,OAAO,aAAa;AAAA,QACpB,OAAO,aAAa;AAAA,QACpB,OAAO,aAAa;AAAA,QACpB,kBAAkB,aAAa;AAAA,QAC/B,OAAO,aAAa;AAAA,QACpB,QAAQ,aAAa;AAAA,QACrB,eAAe,aAAa;AAAA,QAC5B,YAAY,aAAa;AAAA,QACzB,eAAe,aAAa;AAAA,QAC5B,aAAa,aAAa;AAAA,QAC1B,WAAW,aAAa;AAAA,QACxB,MAAM,aAAa;AAAA,QACnB,aAAa,aAAa;AAAA,QAC1B,UAAU,aAAa;AAAA,QACvB,aAAa,aAAa;AAAA,MAAA;AAAA,IAAA;AAAA,EAGhC;;;;;;;;","x_google_ignoreList":[1,2,3,4,5,6,7,8]}