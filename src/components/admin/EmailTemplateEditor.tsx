import React, { useState, useEffect } from 'react';
import { Mail, Plus, Edit, Save, Trash2, AlertCircle, CheckCircle } from 'lucide-react';
import { supabase } from '../../config/supabase';
import { TextSubstitution } from './TextSubstitution';

// UI components should be passed as props from the consuming app
interface EmailTemplateEditorProps {
  Button: any;
  Card: any;
  CardContent: any;
  CardDescription: any;
  CardHeader: any;
  CardTitle: any;
  Input: any;
  Label: any;
  Textarea: any;
  Badge: any;
  Select: any;
  SelectContent: any;
  SelectItem: any;
  SelectTrigger: any;
  SelectValue: any;
  Popover: any;
  PopoverContent: any;
  PopoverTrigger: any;
}

// Interface matching our email_templates table
interface EmailTemplate {
  id: string;
  name: string;
  type: string;
  subject_template: string;
  html_body_template: string;
  text_body_template?: string;
  is_active: boolean;
  is_system?: boolean;
  category?: string;
  default_priority?: number;
  use_count?: number;
  last_used_at?: string;
  created_at?: string;
  updated_at?: string;
}

const EmailTemplateEditor: React.FC<EmailTemplateEditorProps> = ({
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Input,
  Label,
  Textarea,
  Badge,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Popover,
  PopoverContent,
  PopoverTrigger,
}) => {
  const [templates, setTemplates] = useState<EmailTemplate[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeField, setActiveField] = useState<'subject' | 'html' | 'text' | null>(null);
  const [cursorPosition, setCursorPosition] = useState<number>(0);

  // Load templates from database
  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await supabase
        .from('email_templates')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      setTemplates(data || []);
    } catch (err: any) {
      console.error('Error loading templates:', err);
      setError(err.message || 'Failed to load templates');
    } finally {
      setLoading(false);
    }
  };

  const handleSelectTemplate = (template: EmailTemplate) => {
    setSelectedTemplate({ ...template });
    setIsEditing(false);
    setError(null);
  };

  const handleSave = async () => {
    if (!selectedTemplate) return;

    try {
      setSaving(true);
      setError(null);

      const { error } = await supabase
        .from('email_templates')
        .upsert({
          id: selectedTemplate.id,
          name: selectedTemplate.name,
          type: selectedTemplate.type,
          subject_template: selectedTemplate.subject_template,
          html_body_template: selectedTemplate.html_body_template,
          text_body_template: selectedTemplate.text_body_template,
          is_active: selectedTemplate.is_active,
          is_system: selectedTemplate.is_system || false,
          category: selectedTemplate.category || 'general',
          default_priority: selectedTemplate.default_priority || 1,
          updated_at: new Date().toISOString(),
        });

      if (error) {
        throw error;
      }

      // Reload templates to get updated data
      await loadTemplates();
      
      // Update selected template with fresh data
      const updatedTemplate = templates.find(t => t.id === selectedTemplate.id);
      if (updatedTemplate) {
        setSelectedTemplate(updatedTemplate);
      }
      
      setIsEditing(false);
    } catch (err: any) {
      console.error('Error saving template:', err);
      setError(err.message || 'Failed to save template');
    } finally {
      setSaving(false);
    }
  };

  const handleCreateNew = () => {
    const newTemplate: EmailTemplate = {
      id: '', // Will be generated by database
      name: 'New Template',
      type: 'custom',
      subject_template: '',
      html_body_template: '',
      text_body_template: '',
      is_active: true,
      is_system: false,
      category: 'general',
      default_priority: 1,
    };
    setTemplates(prev => [newTemplate, ...prev]);
    setSelectedTemplate(newTemplate);
    setIsEditing(true);
    setError(null);
  };

  const handleDelete = async (templateId: string) => {
    if (!confirm('Are you sure you want to delete this template?')) return;

    try {
      setError(null);
      
      const { error } = await supabase
        .from('email_templates')
        .delete()
        .eq('id', templateId);

      if (error) {
        throw error;
      }

      await loadTemplates();
      
      if (selectedTemplate?.id === templateId) {
        setSelectedTemplate(null);
        setIsEditing(false);
      }
    } catch (err: any) {
      console.error('Error deleting template:', err);
      setError(err.message || 'Failed to delete template');
    }
  };

  const extractVariables = (text: string): string[] => {
    const regex = /\{\{([^}]+)\}\}/g;
    const variables = new Set<string>();
    let match;
    
    while ((match = regex.exec(text)) !== null) {
      variables.add(match[1].trim());
    }
    
    return Array.from(variables);
  };

  const getAvailableVariables = (): string[] => {
    if (!selectedTemplate) return [];
    
    const subjectVars = extractVariables(selectedTemplate.subject_template);
    const htmlVars = extractVariables(selectedTemplate.html_body_template);
    const textVars = selectedTemplate.text_body_template ? extractVariables(selectedTemplate.text_body_template) : [];
    
    return [...new Set([...subjectVars, ...htmlVars, ...textVars])];
  };

  const handleVariableInsert = (variable: string) => {
    if (!selectedTemplate || !activeField) return;

    const fieldMap = {
      subject: 'subject_template',
      html: 'html_body_template',
      text: 'text_body_template'
    } as const;

    const fieldName = fieldMap[activeField];
    const currentValue = selectedTemplate[fieldName] || '';
    
    // Insert variable at cursor position
    const newValue = 
      currentValue.slice(0, cursorPosition) + 
      variable + 
      currentValue.slice(cursorPosition);

    setSelectedTemplate(prev => prev ? {
      ...prev,
      [fieldName]: newValue
    } : null);

    // Update cursor position to after the inserted variable
    setCursorPosition(cursorPosition + variable.length);
  };

  const handleFieldFocus = (field: 'subject' | 'html' | 'text', event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setActiveField(field);
    setCursorPosition(event.target.selectionStart || 0);
  };

  const handleFieldSelection = (event: React.MouseEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setCursorPosition((event.target as HTMLInputElement | HTMLTextAreaElement).selectionStart || 0);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-learning-primary"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-learning-primary flex items-center gap-2">
            <Mail className="w-6 h-6" />
            Email Template Editor
          </h2>
          <p className="text-muted-foreground mt-1">
            Manage email templates for notifications and communications
          </p>
        </div>
        <Button onClick={handleCreateNew} className="flex items-center gap-2">
          <Plus className="w-4 h-4" />
          Create Template
        </Button>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-center gap-2">
          <AlertCircle className="w-5 h-5 text-red-500" />
          <span className="text-red-700">{error}</span>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Template List */}
        <Card>
          <CardHeader>
            <CardTitle>Templates ({templates.length})</CardTitle>
            <CardDescription>Select a template to edit</CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            {templates.length === 0 ? (
              <p className="text-muted-foreground text-center py-4">
                No templates found. Create your first template!
              </p>
            ) : (
              templates.map((template) => (
                <div
                  key={template.id}
                  className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                    selectedTemplate?.id === template.id
                      ? 'border-learning-primary bg-learning-primary/5'
                      : 'border-learning-border hover:border-learning-primary/50'
                  }`}
                  onClick={() => handleSelectTemplate(template)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h4 className="font-medium">{template.name}</h4>
                      <p className="text-sm text-muted-foreground">{template.type}</p>
                      {template.category && (
                        <Badge variant="outline" className="text-xs mt-1">
                          {template.category}
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center gap-2">
                      {template.is_system && (
                        <Badge variant="secondary" className="text-xs">
                          System
                        </Badge>
                      )}
                      <Badge variant={template.is_active ? 'default' : 'secondary'}>
                        {template.is_active ? 'Active' : 'Inactive'}
                      </Badge>
                      {!template.is_system && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDelete(template.id);
                          }}
                          className="h-6 w-6 p-0 text-red-500 hover:text-red-700"
                        >
                          <Trash2 className="w-3 h-3" />
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </CardContent>
        </Card>

        {/* Template Editor */}
        <div className="lg:col-span-2 space-y-4">
          {selectedTemplate ? (
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>
                    {isEditing ? 'Editing' : 'Viewing'}: {selectedTemplate.name}
                  </CardTitle>
                  <div className="flex gap-2">
                    {!isEditing && (
                      <Button variant="outline" onClick={() => setIsEditing(true)}>
                        <Edit className="w-4 h-4 mr-2" />
                        Edit
                      </Button>
                    )}
                    {isEditing && (
                      <>
                        <Button variant="outline" onClick={() => setIsEditing(false)}>
                          Cancel
                        </Button>
                        <Button onClick={handleSave} disabled={saving}>
                          {saving ? (
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          ) : (
                            <Save className="w-4 h-4 mr-2" />
                          )}
                          Save
                        </Button>
                      </>
                    )}
                  </div>
                </div>
                {selectedTemplate.is_system && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-blue-500" />
                    <span className="text-blue-700 text-sm">
                      This is a system template. It cannot be deleted but can be edited.
                    </span>
                  </div>
                )}
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="name">Template Name</Label>
                    <Input
                      id="name"
                      value={selectedTemplate.name}
                      onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, name: e.target.value} : null)}
                      disabled={!isEditing || selectedTemplate.is_system}
                    />
                  </div>
                  <div>
                    <Label htmlFor="type">Type</Label>
                    <Select
                      value={selectedTemplate.type}
                      onValueChange={(value) => setSelectedTemplate(prev => prev ? {...prev, type: value} : null)}
                      disabled={!isEditing || selectedTemplate.is_system}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="welcome">Welcome</SelectItem>
                        <SelectItem value="lesson_completed">Lesson Completed</SelectItem>
                        <SelectItem value="track_milestone_50">Track Milestone 50%</SelectItem>
                        <SelectItem value="quiz_high_score">Quiz High Score</SelectItem>
                        <SelectItem value="document_assignment">Document Assignment</SelectItem>
                        <SelectItem value="reminder">Reminder</SelectItem>
                        <SelectItem value="custom">Custom</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="category">Category</Label>
                    <Input
                      id="category"
                      value={selectedTemplate.category || ''}
                      onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, category: e.target.value} : null)}
                      disabled={!isEditing}
                      placeholder="e.g., learning, system, marketing"
                    />
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id="is_active"
                        checked={selectedTemplate.is_active}
                        onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, is_active: e.target.checked} : null)}
                        disabled={!isEditing}
                        className="rounded border-gray-300"
                      />
                      <Label htmlFor="is_active">Active</Label>
                    </div>
                  </div>
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label htmlFor="subject">Subject Template</Label>
                    {isEditing && (
                      <TextSubstitution 
                        onVariableInsert={handleVariableInsert}
                        Button={Button}
                        Card={Card}
                        CardContent={CardContent}
                        CardDescription={CardDescription}
                        CardHeader={CardHeader}
                        CardTitle={CardTitle}
                        Badge={Badge}
                        Popover={Popover}
                        PopoverContent={PopoverContent}
                        PopoverTrigger={PopoverTrigger}
                      />
                    )}
                  </div>
                  <Input
                    id="subject"
                    value={selectedTemplate.subject_template}
                    onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, subject_template: e.target.value} : null)}
                    onFocus={(e) => handleFieldFocus('subject', e)}
                    onMouseUp={handleFieldSelection}
                    disabled={!isEditing}
                    placeholder="Use {{variable_name}} for dynamic content"
                  />
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label htmlFor="html_body">HTML Body Template</Label>
                    {isEditing && (
                      <TextSubstitution 
                        onVariableInsert={handleVariableInsert}
                        Button={Button}
                        Card={Card}
                        CardContent={CardContent}
                        CardDescription={CardDescription}
                        CardHeader={CardHeader}
                        CardTitle={CardTitle}
                        Badge={Badge}
                        Popover={Popover}
                        PopoverContent={PopoverContent}
                        PopoverTrigger={PopoverTrigger}
                      />
                    )}
                  </div>
                  <Textarea
                    id="html_body"
                    value={selectedTemplate.html_body_template}
                    onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, html_body_template: e.target.value} : null)}
                    onFocus={(e) => handleFieldFocus('html', e)}
                    onMouseUp={handleFieldSelection}
                    disabled={!isEditing}
                    rows={8}
                    placeholder="HTML content with {{variable_name}} placeholders"
                  />
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label htmlFor="text_body">Text Body Template (Optional)</Label>
                    {isEditing && (
                      <TextSubstitution 
                        onVariableInsert={handleVariableInsert}
                        Button={Button}
                        Card={Card}
                        CardContent={CardContent}
                        CardDescription={CardDescription}
                        CardHeader={CardHeader}
                        CardTitle={CardTitle}
                        Badge={Badge}
                        Popover={Popover}
                        PopoverContent={PopoverContent}
                        PopoverTrigger={PopoverTrigger}
                      />
                    )}
                  </div>
                  <Textarea
                    id="text_body"
                    value={selectedTemplate.text_body_template || ''}
                    onChange={(e) => setSelectedTemplate(prev => prev ? {...prev, text_body_template: e.target.value} : null)}
                    onFocus={(e) => handleFieldFocus('text', e)}
                    onMouseUp={handleFieldSelection}
                    disabled={!isEditing}
                    rows={4}
                    placeholder="Plain text version with {{variable_name}} placeholders"
                  />
                </div>

                <div>
                  <Label>Detected Variables</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {getAvailableVariables().length > 0 ? (
                      getAvailableVariables().map((variable, index) => (
                        <Badge key={index} variant="outline">
                          {`{{${variable}}}`}
                        </Badge>
                      ))
                    ) : (
                      <span className="text-sm text-muted-foreground">No variables detected</span>
                    )}
                  </div>
                  <p className="text-xs text-muted-foreground mt-2">
                    Variables are automatically detected from your template content. Use double curly braces: {`{{variable_name}}`}
                  </p>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="flex items-center justify-center py-12">
                <div className="text-center">
                  <Mail className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
                  <p className="text-muted-foreground">Select a template to edit</p>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default EmailTemplateEditor;
