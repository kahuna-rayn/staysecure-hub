{"version":3,"file":"index.umd.js","sources":["../src/components/AuthProvider.tsx","../src/components/AuthPage.tsx","../src/components/ActivateAccount.tsx","../src/components/ResetPassword.tsx","../src/components/AuthModuleWrapper.tsx","../src/components/ForgotPassword.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface AuthConfig {\n  supabaseClient: any;\n  redirectTo?: string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  loading: boolean;\n  error: string | null;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, fullName?: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  activateUser: (password: string) => Promise<void>;\n  sendActivationEmail: (email: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextValue | null>(null);\n\n// Default context value to prevent errors during initialization\nconst defaultAuthContext: AuthContextValue = {\n  user: null,\n  loading: true,\n  error: null,\n  signIn: async () => {},\n  signUp: async () => {},\n  signOut: async () => {},\n  resetPassword: async () => {},\n  activateUser: async () => {},\n  sendActivationEmail: async () => {},\n};\n\nexport const AuthProvider: React.FC<{\n  config: AuthConfig;\n  children: React.ReactNode;\n}> = ({ config, children }) => {\n  const { supabaseClient } = config;\n  const [user, setUser] = useState<any | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      try {\n        const { data: { session }, error } = await supabaseClient.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n\n        setUser(session?.user || null);\n      } catch (error: any) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabaseClient.auth.onAuthStateChange(\n      async (event, session) => {\n        setUser(session?.user || null);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, [supabaseClient]);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string, fullName?: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const redirectUrl = `${window.location.origin}/activate-account`;\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: redirectUrl,\n          data: {\n            full_name: fullName,\n          },\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { error } = await supabaseClient.auth.signOut();\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Use current origin for redirect URL\n      const baseUrl = window.location.origin;\n      const resetUrl = `${baseUrl}/reset-password?email=${encodeURIComponent(email)}`;\n      \n      console.log('Sending password reset to:', email);\n      console.log('Reset URL:', resetUrl);\n      \n      // Use the Edge Function to send simple reset email (no auth tokens)\n      const { error } = await supabaseClient.functions.invoke('send-email', {\n        body: {\n          to: email,\n          subject: 'Reset Your Password',\n          html: `\n            <h2>Reset Your Password</h2>\n            <p>Click the link below to reset your password:</p>\n            <p><a href=\"${resetUrl}\">Reset Password</a></p>\n            <p>If the link doesn't work, copy and paste this URL into your browser:</p>\n            <p>${resetUrl}</p>\n          `\n        }\n      });\n      \n      if (error) {\n        throw new Error('Failed to send reset email');\n      }\n      \n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const activateUser = async (password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { error } = await supabaseClient.auth.updateUser({\n        password: password\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendActivationEmail = async (email: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Get the current app's base URL and redirect to activation page\n      const baseUrl = window.location.origin;\n      const redirectUrl = `${baseUrl}/activate-account`;\n      \n      console.log('Sending activation email to:', email);\n      console.log('Redirect URL:', redirectUrl);\n      \n      // First, check if user exists in profiles table\n      const { data: profile, error: profileError } = await supabaseClient\n        .from('profiles')\n        .select('id, username, full_name')\n        .eq('username', email)\n        .maybeSingle();\n\n      console.log('Profile check:', { profile, profileError });\n      console.log('Profile error details:', profileError);\n\n      if (profileError && profileError.code !== 'PGRST116') {\n        // PGRST116 is \"not found\" error, which is expected for new users\n        console.error('Profile query failed:', profileError);\n        throw profileError;\n      }\n\n      if (profile) {\n        // User exists in profiles table - proceed with activation\n        console.log('User found in profiles table, proceeding with activation');\n        \n        // Use Supabase client-side approach for deployment compatibility\n        const baseUrl = window.location.origin;\n        const redirectUrl = `${baseUrl}/activate-account`;\n        \n        console.log('Using deployment-friendly client-side approach');\n        console.log('Redirect URL:', redirectUrl);\n        \n        // Use resetPasswordForEmail which works client-side and sends proper activation email\n        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(email, {\n          redirectTo: redirectUrl,\n        });\n\n        if (error) {\n          throw error;\n        }\n\n        console.log('Activation email sent successfully:', data);\n      } else {\n        // User doesn't exist in profiles table\n        console.log('User not found in profiles table');\n        setError('This email address is not registered in our system. Please contact your administrator to request access.');\n        return;\n      }\n    } catch (error: any) {\n      console.error('Activation email error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value: AuthContextValue = {\n    user,\n    loading,\n    error,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    activateUser,\n    sendActivationEmail,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextValue => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    console.warn(\"useAuth called outside AuthProvider, using default context\");\n    return defaultAuthContext;\n  }\n  return context;\n};","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAuth } from './AuthProvider';\nimport { Loader2, Eye, EyeOff } from 'lucide-react';\n\ninterface AuthPageProps {\n  authError?: string;\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Input: any;\n  Label: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Alert: any;\n  AlertDescription: any;\n  // Assets - should be passed from the consuming app\n  logoUrl?: string;\n}\n\nconst AuthPage: React.FC<AuthPageProps> = ({ \n  authError,\n  Button,\n  Input,\n  Label,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Alert,\n  AlertDescription,\n  logoUrl\n}) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [resetMessage, setResetMessage] = useState('');\n  const [activationMessage, setActivationMessage] = useState('');\n  const { signIn, signOut, user, loading, error, resetPassword } = useAuth();\n  const location = useLocation();\n\n  console.log('[AuthPage] src/components rendered', { href: window.location.href, ts: new Date().toISOString(), state: location.state });\n\n  // Check for activation success message\n  useEffect(() => {\n    if (location.state?.message) {\n      setActivationMessage(location.state.message);\n      // Clear the message from location state\n      window.history.replaceState({}, document.title);\n    }\n  }, [location.state]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await signIn(email, password);\n  };\n\n  const handleForgotPassword = async () => {\n    if (!email) {\n      setResetMessage('Please enter your email address first');\n      return;\n    }\n    \n    try {\n      setResetMessage('');\n      await resetPassword(email);\n      setResetMessage('Password reset email sent! Check your inbox.');\n    } catch (error: any) {\n      setResetMessage(`Error: ${error.message}`);\n    }\n  };\n\n  if (user) {\n    return (\n      <div className=\"min-h-screen bg-learning-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Welcome!</CardTitle>\n            <CardDescription>You are logged in as {user.email}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={signOut} variant=\"outline\" className=\"w-full\">\n              Sign Out\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-learning-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* RAYN Secure Branding */}\n        <div className=\"text-center\">\n          <img \n            src={logoUrl || '/rayn-logo.png'} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-learning-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Behavioural Science Based Cybersecurity Learning</p>\n        </div>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>Enter your credentials to access your account</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              {activationMessage && (\n                <Alert>\n                  <AlertDescription>{activationMessage}</AlertDescription>\n                </Alert>\n              )}\n\n              {(error || authError) && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{authError || error}</AlertDescription>\n                </Alert>\n              )}\n\n              {resetMessage && (\n                <Alert variant={resetMessage.includes('Error') ? \"destructive\" : \"default\"}>\n                  <AlertDescription>{resetMessage}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Sign In\n              </Button>\n            </form>\n\n            <div className=\"mt-4 text-center\">\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto text-teal-600\"\n                onClick={handleForgotPassword}\n              >\n                Forgot Password?\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../components/AuthProvider';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Eye, EyeOff } from 'lucide-react';\nimport raynLogo from '@/assets/rayn-logo.png';\n\ninterface ActivateAccountProps {\n  supabaseClient: any;\n}\n\nconst ActivateAccount: React.FC<ActivateAccountProps> = ({ supabaseClient }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { activateUser, error: authError, loading: authLoading, signOut } = useAuth();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [accessToken, setAccessToken] = useState<string | null>(null);\n  const [refreshToken, setRefreshToken] = useState<string | null>(null);\n  \n  // Parse URL parameters at component level\n  const searchParams = new URLSearchParams(location.search);\n\n  useEffect(() => {\n    const run = async () => {\n      // Debug logging\n      console.log('ActivateAccount: URL hash:', window.location.hash);\n      console.log('ActivateAccount: URL search:', window.location.search);\n      console.log('ActivateAccount: Full URL:', window.location.href);\n      console.log('ActivateAccount: Location hash:', location.hash);\n      \n      // Parse tokens from hash fragment if present: #access_token=...&refresh_token=...&type=signup\n      const hash = location.hash || window.location.hash;\n      const hashParams = new URLSearchParams(hash.startsWith('#') ? hash.slice(1) : hash);\n      \n      const type = hashParams.get('type') || searchParams.get('type');\n      const access = hashParams.get('access_token');\n      const refresh = hashParams.get('refresh_token');\n      const token = searchParams.get('token');\n      const tokenHash = searchParams.get('token_hash');\n\n      console.log('ActivateAccount: Parsed URL params:', { \n        type, \n        hasAccessToken: !!access, \n        hasRefreshToken: !!refresh,\n        hasToken: !!token,\n        hasTokenHash: !!tokenHash\n      });\n\n      // Handle invite flow with token (Supabase inviteUserByEmail)\n      if (tokenHash && type === 'invite') {\n        console.log('ActivateAccount: Processing invite token');\n        try {\n          const { data, error } = await supabaseClient.auth.verifyOtp({\n            token_hash: tokenHash,\n            type: 'invite',\n          });\n          \n          if (error) {\n            console.error('ActivateAccount: verifyOtp error:', error);\n            setError('Invalid or expired activation link. Please contact your administrator.');\n          } else if (data.user) {\n            console.log('ActivateAccount: Invite verified successfully for:', data.user.email);\n            setEmail(data.user.email || '');\n            // User is now authenticated and can set password\n          }\n        } catch (e) {\n          console.error('ActivateAccount: verifyOtp exception:', e);\n          setError('Failed to verify activation link. Please try again.');\n        }\n        return;\n      }\n\n      // Handle simple activation flow with email and user_id\nconst emailParam = searchParams.get('email');\nconst userIdParam = searchParams.get('user_id');\n\nif (emailParam && userIdParam) {\n  console.log('ActivateAccount: Processing simple activation for:', emailParam);\n  setEmail(emailParam);\n  // User can now set their password without token verification\n  return;\n}\n\n      // Handle signup/invite flows with hash tokens (legacy)\n      if ((type === 'signup' || type === 'invite') && access && refresh) {\n        console.log('ActivateAccount: Setting session for', type, 'flow');\n        setAccessToken(access);\n        setRefreshToken(refresh);\n        try {\n          const { data, error } = await supabaseClient.auth.setSession({\n            access_token: access,\n            refresh_token: refresh,\n          });\n          if (error) {\n            console.error('ActivateAccount: setSession error:', error);\n            setError('Invalid activation link. Please try again.');\n          } else if (data.user) {\n            console.log('ActivateAccount: Session set successfully for:', data.user.email);\n            setEmail(data.user.email || '');\n          }\n        } catch (e) {\n          console.error('ActivateAccount: setSession exception:', e);\n          setError('Failed to activate session. Please try again.');\n        }\n        return;\n      }\n\n      // Fallback: if a session already exists (Supabase may have handled invite), allow activation without tokens\n      console.log('ActivateAccount: Checking for existing session');\n      const { data: { session } } = await supabaseClient.auth.getSession();\n      if (session) {\n        console.log('ActivateAccount: Found existing session for:', session.user?.email);\n        // Set the email from the session user\n        setEmail(session.user?.email || '');\n        return; // authenticated; proceed to allow password setup\n      }\n\n      console.log('ActivateAccount: No session or tokens found');\n      setError('Invalid or expired activation link. Please contact your administrator.');\n      \n      // For testing purposes, allow proceeding without valid session\n      console.log('ActivateAccount: No valid session found - this is expected when testing directly');\n    };\n\n    void run();\n  }, [location.hash]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n// Check password requirements: lowercase, uppercase, digit, special character\nconst hasLowercase = /[a-z]/.test(password);\nconst hasUppercase = /[A-Z]/.test(password);\nconst hasDigit = /\\d/.test(password);\nconst hasSpecial = /[!@#$%^&*()_+\\-=\\[\\]{};':\"|,.<>?`~]/.test(password);\n\nif (password.length < 12 || !hasLowercase || !hasUppercase || !hasDigit || !hasSpecial) {\n  setError('Password must be at least 12 characters long and contain at least one lowercase letter, one uppercase letter, one digit, and one special character');\n  setLoading(false);\n  return;\n}\n\n    try {\n      // Check if this is a simple activation flow with user_id\n      const userIdParam = searchParams.get('user_id');\n      \n      if (userIdParam) {\n        // Simple activation flow - use activateUser with userId\n        await activateUser(email, password, confirmPassword, userIdParam);\n        setSuccess('Account activated successfully! Redirecting to login...');\n        \n        // Redirect to login after 2 seconds\n        setTimeout(() => {\n          navigate('/');\n        }, 2000);\n      } else {\n        // Legacy flow - use activateUser function\n        await activateUser(email, password, confirmPassword);\n        setSuccess('Account activated successfully! Redirecting to login...');\n        \n        // Sign out the user after activation\n        await signOut();\n        \n        // Redirect to login after 2 seconds\n        setTimeout(() => {\n          navigate('/');\n        }, 2000);\n      }\n\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center mb-8\">\n          <img \n            src={raynLogo} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Cybersecurity Training Platform</p>\n        </div>\n        \n        <Card className=\"border-primary/20 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-primary\">\n              Activate Your Account\n            </CardTitle>\n            <CardDescription>\n              Set your password to complete account activation\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {(error || authError) && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error || authError}</AlertDescription>\n                </Alert>\n              )}\n              \n              {success && (\n                <Alert>\n                  <AlertDescription>{success}</AlertDescription>\n                </Alert>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    minLength={6}\n                    className=\"pr-10\"\n                    placeholder=\"Enter your password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                    minLength={6}\n                    className=\"pr-10\"\n                    placeholder=\"Confirm your password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\" \n                disabled={loading || authLoading}\n              >\n                {(loading || authLoading) && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Activate Account\n              </Button>\n              \n              <div className=\"text-center\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => navigate('/')}\n                  className=\"w-full border-primary/20 text-primary hover:bg-primary/10\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ActivateAccount;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Eye, EyeOff } from 'lucide-react';\nimport raynLogo from '@/assets/rayn-logo.png';\n\ninterface ResetPasswordProps {\n  supabaseClient: any;\n}\n\nconst ResetPassword: React.FC<ResetPasswordProps> = ({ supabaseClient }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  useEffect(() => {\n    const run = async () => {\n      // Debug logging\n      console.log('ResetPassword: URL hash:', window.location.hash);\n      console.log('ResetPassword: URL search:', window.location.search);\n      console.log('ResetPassword: Full URL:', window.location.href);\n      \n    // Debug logging\n    console.log('ResetPassword: URL hash:', window.location.hash);\n    console.log('ResetPassword: URL search:', window.location.search);\n    console.log('ResetPassword: Full URL:', window.location.href);\n    \n    // Parse tokens from hash and search\n    const hash = location.hash || window.location.hash;\n    const hashParams = new URLSearchParams(hash.startsWith('#') ? hash.slice(1) : hash);\n    const searchParams = new URLSearchParams(location.search);\n    \n    const type = hashParams.get('type') || searchParams.get('type');\n    const tokenHash = searchParams.get('token_hash');\n\n    console.log('ResetPassword: Parsed params:', { \n      type, \n      hasTokenHash: !!tokenHash,\n      hashParams: Array.from(hashParams.entries()),\n      searchParams: Array.from(searchParams.entries())\n    });\n\n    // Only support token_hash recovery flow\n    if (tokenHash && type === 'recovery') {\n      console.log('ResetPassword: Processing recovery token');\n      try {\n        const { data, error: verifyError } = await supabaseClient.auth.verifyOtp({\n          token_hash: tokenHash,\n          type: 'recovery',\n        });\n        \n        if (verifyError) {\n          console.error('ResetPassword: verifyOtp error:', verifyError);\n          setError('Invalid or expired password reset link. Please request a new one.');\n        } else if (data.user) {\n          console.log('ResetPassword: Recovery verified successfully for:', data.user.email);\n          setEmail(data.user.email || '');\n        }\n      } catch (e) {\n        console.error('ResetPassword: verifyOtp exception:', e);\n        setError('Failed to verify password reset link. Please try again.');\n      }\n      return;\n    }\n\n    console.log('ResetPassword: No valid recovery token found');\n    // Don't set error here - user might have clicked an old link but could still have a valid recovery session\n    };\n\n    void run();\n  }, [location.hash, location.search, supabaseClient]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n    // Check password requirements: lowercase, uppercase, digit, special character\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /\\d/.test(password);\n    const hasSpecial = /[!@#$%^&*()_+\\-=\\[\\]{};':\"|,.<>?`~]/.test(password);\n\n    if (password.length < 12 || !hasLowercase || !hasUppercase || !hasDigit || !hasSpecial) {\n      setError('Password must be at least 12 characters long and contain at least one lowercase letter, one uppercase letter, one digit, and one special character');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Use Supabase client's updateUser method with the recovery session\n      const { error: updateError } = await supabaseClient.auth.updateUser({\n        password: password\n      });\n      \n      if (updateError) {\n        const errorMsg = updateError.message;\n        \n        // Provide more specific error messages\n        if (errorMsg.toLowerCase().includes('weak') || (errorMsg.toLowerCase().includes('password') && errorMsg.toLowerCase().includes('strong'))) {\n          throw new Error('Password is too weak. Please use a stronger password with at least 12 characters, including uppercase, lowercase, numbers, and special characters.');\n        } else if (errorMsg.toLowerCase().includes('same')) {\n          throw new Error('New password cannot be the same as your current password. Please choose a different password.');\n        } else if (errorMsg.toLowerCase().includes('session') || errorMsg.toLowerCase().includes('expired')) {\n          throw new Error('Your password reset link has expired. Please request a new one.');\n        } else {\n          throw new Error(errorMsg);\n        }\n      }\n      \n      setSuccess('Password reset successfully! Redirecting to login...');\n      \n      // Sign out to clear the recovery session\n      await supabaseClient.auth.signOut();\n      \n      setTimeout(() => {\n        navigate('/', { replace: true });\n      }, 2000);\n      \n    } catch (error: any) {\n      setError(error.message || 'Failed to reset password. Please try again or request a new reset link.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center mb-8\">\n          <img \n            src={raynLogo} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Cybersecurity Training Platform</p>\n        </div>\n        \n        <Card className=\"border-primary/20 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-primary\">\n              Reset Your Password\n            </CardTitle>\n            <CardDescription>\n              Enter your new password below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              {success && (\n                <Alert>\n                  <AlertDescription>{success}</AlertDescription>\n                </Alert>\n              )}\n              \n              {email && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    disabled\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">New Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    minLength={12}\n                    className=\"pr-10\"\n                    placeholder=\"Enter your new password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                    minLength={12}\n                    className=\"pr-10\"\n                    placeholder=\"Confirm your new password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\" \n                disabled={loading}\n              >\n                {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Reset Password\n              </Button>\n              \n              <div className=\"text-center\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => navigate('/')}\n                  className=\"w-full border-primary/20 text-primary hover:bg-primary/10\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import React from 'react';\nimport AuthPage from './AuthPage';\nimport ActivateAccount from './ActivateAccount';\nimport ResetPassword from './ResetPassword';\n\ninterface AuthModuleWrapperProps {\n  // Supabase client - should be passed from the consuming app\n  supabase: any;\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Input: any;\n  Label: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Alert: any;\n  AlertDescription: any;\n  // Assets - should be passed from the consuming app\n  logoUrl?: string;\n  // Component to render\n  component: 'AuthPage' | 'ActivateAccount' | 'ResetPassword';\n  // Additional props for specific components\n  authError?: string;\n}\n\nexport const AuthModuleWrapper: React.FC<AuthModuleWrapperProps> = ({\n  supabase,\n  Button,\n  Input,\n  Label,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Alert,\n  AlertDescription,\n  logoUrl,\n  component,\n  authError\n}) => {\n  const commonProps = {\n    Button,\n    Input,\n    Label,\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n    Alert,\n    AlertDescription,\n    logoUrl\n  };\n\n  switch (component) {\n    case 'AuthPage':\n      return <AuthPage {...commonProps} authError={authError} />;\n    case 'ActivateAccount':\n      return <ActivateAccount {...commonProps} supabase={supabase} />;\n    case 'ResetPassword':\n      return <ResetPassword {...commonProps} supabase={supabase} />;\n    default:\n      return null;\n  }\n};\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './AuthProvider';\n\ninterface ForgotPasswordProps {\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Input: any;\n  Label: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Alert: any;\n  AlertDescription: any;\n  // Assets - should be passed from the consuming app\n  logoUrl?: string;\n}\n\nconst ForgotPassword: React.FC<ForgotPasswordProps> = ({\n  Button,\n  Input,\n  Label,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Alert,\n  AlertDescription,\n  logoUrl\n}) => {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isError, setIsError] = useState(false);\n  const { resetPassword } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      setIsError(true);\n      setMessage('Please enter your email address');\n      return;\n    }\n    \n    setLoading(true);\n    setMessage('');\n    setIsError(false);\n    \n    try {\n      await resetPassword(email);\n      setIsError(false);\n      setMessage('Password reset email sent! Please check your inbox and follow the instructions.');\n    } catch (error: any) {\n      setIsError(true);\n      setMessage(error.message || 'Failed to send reset email. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-learning-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* RAYN Secure Branding */}\n        <div className=\"text-center\">\n          <img \n            src={logoUrl || '/rayn-logo.png'} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-learning-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Behavioural Science Based Cybersecurity Learning</p>\n        </div>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Reset Your Password</CardTitle>\n            <CardDescription>\n              Enter your email address and we'll send you a link to reset your password\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n\n              {message && (\n                <Alert variant={isError ? \"destructive\" : \"default\"}>\n                  <AlertDescription>{message}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading && <div className=\"mr-2 h-4 w-4 animate-spin border-2 border-current border-t-transparent rounded-full\" />}\n                Send Reset Link\n              </Button>\n            </form>\n\n            <div className=\"mt-4 text-center\">\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto text-teal-600\"\n                onClick={() => navigate('/')}\n              >\n                ← Back to Sign In\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;\n"],"names":["createContext","useState","useEffect","error","baseUrl","redirectUrl","jsx","useContext","useLocation","jsxs","EyeOff","Eye","Loader2","useNavigate","Card","CardHeader","CardTitle","CardDescription","CardContent","Alert","AlertDescription","Label","Input","Button"],"mappings":"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"}