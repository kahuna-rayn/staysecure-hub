{"version":3,"file":"index.esm.js","sources":["../src/components/AuthProvider.tsx","../src/components/AuthPage.tsx","../src/components/ActivateAccount.tsx","../src/components/ResetPassword.tsx","../src/components/AuthModuleWrapper.tsx","../src/components/ForgotPassword.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface AuthConfig {\n  supabaseClient: any;\n  redirectTo?: string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  loading: boolean;\n  error: string | null;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, fullName?: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  activateUser: (password: string) => Promise<void>;\n  sendActivationEmail: (email: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextValue | null>(null);\n\n// Default context value to prevent errors during initialization\nconst defaultAuthContext: AuthContextValue = {\n  user: null,\n  loading: true,\n  error: null,\n  signIn: async () => {},\n  signUp: async () => {},\n  signOut: async () => {},\n  resetPassword: async () => {},\n  activateUser: async () => {},\n  sendActivationEmail: async () => {},\n};\n\nexport const AuthProvider: React.FC<{\n  config: AuthConfig;\n  children: React.ReactNode;\n}> = ({ config, children }) => {\n  const { supabaseClient } = config;\n  const [user, setUser] = useState<any | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      try {\n        const { data: { session }, error } = await supabaseClient.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n\n        setUser(session?.user || null);\n      } catch (error: any) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabaseClient.auth.onAuthStateChange(\n      async (event, session) => {\n        setUser(session?.user || null);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, [supabaseClient]);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string, fullName?: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const redirectUrl = `${window.location.origin}/activate-account`;\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: redirectUrl,\n          data: {\n            full_name: fullName,\n          },\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { error } = await supabaseClient.auth.signOut();\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Use current origin for redirect URL\n      const baseUrl = window.location.origin;\n      const resetUrl = `${baseUrl}/reset-password?email=${encodeURIComponent(email)}`;\n      \n      console.log('Sending password reset to:', email);\n      console.log('Reset URL:', resetUrl);\n      \n      // Use the Edge Function to send simple reset email (no auth tokens)\n      const { error } = await supabaseClient.functions.invoke('send-email', {\n        body: {\n          to: email,\n          subject: 'Reset Your Password',\n          html: `\n            <h2>Reset Your Password</h2>\n            <p>Click the link below to reset your password:</p>\n            <p><a href=\"${resetUrl}\">Reset Password</a></p>\n            <p>If the link doesn't work, copy and paste this URL into your browser:</p>\n            <p>${resetUrl}</p>\n          `\n        }\n      });\n      \n      if (error) {\n        throw new Error('Failed to send reset email');\n      }\n      \n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const activateUser = async (password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { error } = await supabaseClient.auth.updateUser({\n        password: password\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendActivationEmail = async (email: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Get the current app's base URL and redirect to activation page\n      const baseUrl = window.location.origin;\n      const redirectUrl = `${baseUrl}/activate-account`;\n      \n      console.log('Sending activation email to:', email);\n      console.log('Redirect URL:', redirectUrl);\n      \n      // First, check if user exists in profiles table\n      const { data: profile, error: profileError } = await supabaseClient\n        .from('profiles')\n        .select('id, username, full_name')\n        .eq('username', email)\n        .maybeSingle();\n\n      console.log('Profile check:', { profile, profileError });\n      console.log('Profile error details:', profileError);\n\n      if (profileError && profileError.code !== 'PGRST116') {\n        // PGRST116 is \"not found\" error, which is expected for new users\n        console.error('Profile query failed:', profileError);\n        throw profileError;\n      }\n\n      if (profile) {\n        // User exists in profiles table - proceed with activation\n        console.log('User found in profiles table, proceeding with activation');\n        \n        // Use Supabase client-side approach for deployment compatibility\n        const baseUrl = window.location.origin;\n        const redirectUrl = `${baseUrl}/activate-account`;\n        \n        console.log('Using deployment-friendly client-side approach');\n        console.log('Redirect URL:', redirectUrl);\n        \n        // Use resetPasswordForEmail which works client-side and sends proper activation email\n        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(email, {\n          redirectTo: redirectUrl,\n        });\n\n        if (error) {\n          throw error;\n        }\n\n        console.log('Activation email sent successfully:', data);\n      } else {\n        // User doesn't exist in profiles table\n        console.log('User not found in profiles table');\n        setError('This email address is not registered in our system. Please contact your administrator to request access.');\n        return;\n      }\n    } catch (error: any) {\n      console.error('Activation email error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value: AuthContextValue = {\n    user,\n    loading,\n    error,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    activateUser,\n    sendActivationEmail,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextValue => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    console.warn(\"useAuth called outside AuthProvider, using default context\");\n    return defaultAuthContext;\n  }\n  return context;\n};","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAuth } from './AuthProvider';\nimport { Loader2, Eye, EyeOff } from 'lucide-react';\n\ninterface AuthPageProps {\n  authError?: string;\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Input: any;\n  Label: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Alert: any;\n  AlertDescription: any;\n  // Assets - should be passed from the consuming app\n  logoUrl?: string;\n}\n\nconst AuthPage: React.FC<AuthPageProps> = ({ \n  authError,\n  Button,\n  Input,\n  Label,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Alert,\n  AlertDescription,\n  logoUrl\n}) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [resetMessage, setResetMessage] = useState('');\n  const [activationMessage, setActivationMessage] = useState('');\n  const { signIn, signOut, user, loading, error, resetPassword } = useAuth();\n  const location = useLocation();\n\n  console.log('[AuthPage] src/components rendered', { href: window.location.href, ts: new Date().toISOString(), state: location.state });\n\n  // Check for activation success message\n  useEffect(() => {\n    if (location.state?.message) {\n      setActivationMessage(location.state.message);\n      // Clear the message from location state\n      window.history.replaceState({}, document.title);\n    }\n  }, [location.state]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await signIn(email, password);\n  };\n\n  const handleForgotPassword = async () => {\n    if (!email) {\n      setResetMessage('Please enter your email address first');\n      return;\n    }\n    \n    try {\n      setResetMessage('');\n      await resetPassword(email);\n      setResetMessage('Password reset email sent! Check your inbox.');\n    } catch (error: any) {\n      setResetMessage(`Error: ${error.message}`);\n    }\n  };\n\n  if (user) {\n    return (\n      <div className=\"min-h-screen bg-learning-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Welcome!</CardTitle>\n            <CardDescription>You are logged in as {user.email}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={signOut} variant=\"outline\" className=\"w-full\">\n              Sign Out\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-learning-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* RAYN Secure Branding */}\n        <div className=\"text-center\">\n          <img \n            src={logoUrl || '/rayn-logo.png'} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-learning-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Behavioural Science Based Cybersecurity Learning</p>\n        </div>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>Enter your credentials to access your account</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              {activationMessage && (\n                <Alert>\n                  <AlertDescription>{activationMessage}</AlertDescription>\n                </Alert>\n              )}\n\n              {(error || authError) && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{authError || error}</AlertDescription>\n                </Alert>\n              )}\n\n              {resetMessage && (\n                <Alert variant={resetMessage.includes('Error') ? \"destructive\" : \"default\"}>\n                  <AlertDescription>{resetMessage}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Sign In\n              </Button>\n            </form>\n\n            <div className=\"mt-4 text-center\">\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto text-teal-600\"\n                onClick={handleForgotPassword}\n              >\n                Forgot Password?\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../components/AuthProvider';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Eye, EyeOff } from 'lucide-react';\nimport raynLogo from '@/assets/rayn-logo.png';\n\ninterface ActivateAccountProps {\n  supabaseClient: any;\n}\n\nconst ActivateAccount: React.FC<ActivateAccountProps> = ({ supabaseClient }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { activateUser, error: authError, loading: authLoading, signOut } = useAuth();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [accessToken, setAccessToken] = useState<string | null>(null);\n  const [refreshToken, setRefreshToken] = useState<string | null>(null);\n  \n  // Parse URL parameters at component level\n  const searchParams = new URLSearchParams(location.search);\n\n  useEffect(() => {\n    const run = async () => {\n      // Debug logging\n      console.log('ActivateAccount: URL hash:', window.location.hash);\n      console.log('ActivateAccount: URL search:', window.location.search);\n      console.log('ActivateAccount: Full URL:', window.location.href);\n      console.log('ActivateAccount: Location hash:', location.hash);\n      \n      // Parse tokens from hash fragment if present: #access_token=...&refresh_token=...&type=signup\n      const hash = location.hash || window.location.hash;\n      const hashParams = new URLSearchParams(hash.startsWith('#') ? hash.slice(1) : hash);\n      \n      const type = hashParams.get('type') || searchParams.get('type');\n      const access = hashParams.get('access_token');\n      const refresh = hashParams.get('refresh_token');\n      const token = searchParams.get('token');\n      const tokenHash = searchParams.get('token_hash');\n\n      console.log('ActivateAccount: Parsed URL params:', { \n        type, \n        hasAccessToken: !!access, \n        hasRefreshToken: !!refresh,\n        hasToken: !!token,\n        hasTokenHash: !!tokenHash\n      });\n\n      // Handle invite flow with token (Supabase inviteUserByEmail)\n      if (tokenHash && type === 'invite') {\n        console.log('ActivateAccount: Processing invite token');\n        try {\n          const { data, error } = await supabaseClient.auth.verifyOtp({\n            token_hash: tokenHash,\n            type: 'invite',\n          });\n          \n          if (error) {\n            console.error('ActivateAccount: verifyOtp error:', error);\n            setError('Invalid or expired activation link. Please contact your administrator.');\n          } else if (data.user) {\n            console.log('ActivateAccount: Invite verified successfully for:', data.user.email);\n            setEmail(data.user.email || '');\n            // User is now authenticated and can set password\n          }\n        } catch (e) {\n          console.error('ActivateAccount: verifyOtp exception:', e);\n          setError('Failed to verify activation link. Please try again.');\n        }\n        return;\n      }\n\n      // Handle simple activation flow with email and user_id\nconst emailParam = searchParams.get('email');\nconst userIdParam = searchParams.get('user_id');\n\nif (emailParam && userIdParam) {\n  console.log('ActivateAccount: Processing simple activation for:', emailParam);\n  setEmail(emailParam);\n  // User can now set their password without token verification\n  return;\n}\n\n      // Handle signup/invite flows with hash tokens (legacy)\n      if ((type === 'signup' || type === 'invite') && access && refresh) {\n        console.log('ActivateAccount: Setting session for', type, 'flow');\n        setAccessToken(access);\n        setRefreshToken(refresh);\n        try {\n          const { data, error } = await supabaseClient.auth.setSession({\n            access_token: access,\n            refresh_token: refresh,\n          });\n          if (error) {\n            console.error('ActivateAccount: setSession error:', error);\n            setError('Invalid activation link. Please try again.');\n          } else if (data.user) {\n            console.log('ActivateAccount: Session set successfully for:', data.user.email);\n            setEmail(data.user.email || '');\n          }\n        } catch (e) {\n          console.error('ActivateAccount: setSession exception:', e);\n          setError('Failed to activate session. Please try again.');\n        }\n        return;\n      }\n\n      // Fallback: if a session already exists (Supabase may have handled invite), allow activation without tokens\n      console.log('ActivateAccount: Checking for existing session');\n      const { data: { session } } = await supabaseClient.auth.getSession();\n      if (session) {\n        console.log('ActivateAccount: Found existing session for:', session.user?.email);\n        // Set the email from the session user\n        setEmail(session.user?.email || '');\n        return; // authenticated; proceed to allow password setup\n      }\n\n      console.log('ActivateAccount: No session or tokens found');\n      setError('Invalid or expired activation link. Please contact your administrator.');\n      \n      // For testing purposes, allow proceeding without valid session\n      console.log('ActivateAccount: No valid session found - this is expected when testing directly');\n    };\n\n    void run();\n  }, [location.hash]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n// Check password requirements: lowercase, uppercase, digit, special character\nconst hasLowercase = /[a-z]/.test(password);\nconst hasUppercase = /[A-Z]/.test(password);\nconst hasDigit = /\\d/.test(password);\nconst hasSpecial = /[!@#$%^&*()_+\\-=\\[\\]{};':\"|,.<>?`~]/.test(password);\n\nif (password.length < 12 || !hasLowercase || !hasUppercase || !hasDigit || !hasSpecial) {\n  setError('Password must be at least 12 characters long and contain at least one lowercase letter, one uppercase letter, one digit, and one special character');\n  setLoading(false);\n  return;\n}\n\n    try {\n      // Check if this is a simple activation flow with user_id\n      const userIdParam = searchParams.get('user_id');\n      \n      if (userIdParam) {\n        // Simple activation flow - use activateUser with userId\n        await activateUser(email, password, confirmPassword, userIdParam);\n        setSuccess('Account activated successfully! Redirecting to login...');\n        \n        // Redirect to login after 2 seconds\n        setTimeout(() => {\n          navigate('/');\n        }, 2000);\n      } else {\n        // Legacy flow - use activateUser function\n        await activateUser(email, password, confirmPassword);\n        setSuccess('Account activated successfully! Redirecting to login...');\n        \n        // Sign out the user after activation\n        await signOut();\n        \n        // Redirect to login after 2 seconds\n        setTimeout(() => {\n          navigate('/');\n        }, 2000);\n      }\n\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center mb-8\">\n          <img \n            src={raynLogo} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Cybersecurity Training Platform</p>\n        </div>\n        \n        <Card className=\"border-primary/20 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-primary\">\n              Activate Your Account\n            </CardTitle>\n            <CardDescription>\n              Set your password to complete account activation\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {(error || authError) && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error || authError}</AlertDescription>\n                </Alert>\n              )}\n              \n              {success && (\n                <Alert>\n                  <AlertDescription>{success}</AlertDescription>\n                </Alert>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    minLength={6}\n                    className=\"pr-10\"\n                    placeholder=\"Enter your password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                    minLength={6}\n                    className=\"pr-10\"\n                    placeholder=\"Confirm your password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\" \n                disabled={loading || authLoading}\n              >\n                {(loading || authLoading) && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Activate Account\n              </Button>\n              \n              <div className=\"text-center\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => navigate('/')}\n                  className=\"w-full border-primary/20 text-primary hover:bg-primary/10\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ActivateAccount;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Eye, EyeOff } from 'lucide-react';\nimport raynLogo from '@/assets/rayn-logo.png';\n\ninterface ResetPasswordProps {\n  supabaseClient: any;\n}\n\nconst ResetPassword: React.FC<ResetPasswordProps> = ({ supabaseClient }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  useEffect(() => {\n    const run = async () => {\n      // Debug logging\n      console.log('ResetPassword: URL hash:', window.location.hash);\n      console.log('ResetPassword: URL search:', window.location.search);\n      console.log('ResetPassword: Full URL:', window.location.href);\n      \n    // Debug logging\n    console.log('ResetPassword: URL hash:', window.location.hash);\n    console.log('ResetPassword: URL search:', window.location.search);\n    console.log('ResetPassword: Full URL:', window.location.href);\n    \n    // Parse tokens from hash and search\n    const hash = location.hash || window.location.hash;\n    const hashParams = new URLSearchParams(hash.startsWith('#') ? hash.slice(1) : hash);\n    const searchParams = new URLSearchParams(location.search);\n    \n    const type = hashParams.get('type') || searchParams.get('type');\n    const tokenHash = searchParams.get('token_hash');\n\n    console.log('ResetPassword: Parsed params:', { \n      type, \n      hasTokenHash: !!tokenHash,\n      hashParams: Array.from(hashParams.entries()),\n      searchParams: Array.from(searchParams.entries())\n    });\n\n    // Only support token_hash recovery flow\n    if (tokenHash && type === 'recovery') {\n      console.log('ResetPassword: Processing recovery token');\n      try {\n        const { data, error: verifyError } = await supabaseClient.auth.verifyOtp({\n          token_hash: tokenHash,\n          type: 'recovery',\n        });\n        \n        if (verifyError) {\n          console.error('ResetPassword: verifyOtp error:', verifyError);\n          setError('Invalid or expired password reset link. Please request a new one.');\n        } else if (data.user) {\n          console.log('ResetPassword: Recovery verified successfully for:', data.user.email);\n          setEmail(data.user.email || '');\n        }\n      } catch (e) {\n        console.error('ResetPassword: verifyOtp exception:', e);\n        setError('Failed to verify password reset link. Please try again.');\n      }\n      return;\n    }\n\n    console.log('ResetPassword: No valid recovery token found');\n    // Don't set error here - user might have clicked an old link but could still have a valid recovery session\n    };\n\n    void run();\n  }, [location.hash, location.search, supabaseClient]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n    // Check password requirements: lowercase, uppercase, digit, special character\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /\\d/.test(password);\n    const hasSpecial = /[!@#$%^&*()_+\\-=\\[\\]{};':\"|,.<>?`~]/.test(password);\n\n    if (password.length < 12 || !hasLowercase || !hasUppercase || !hasDigit || !hasSpecial) {\n      setError('Password must be at least 12 characters long and contain at least one lowercase letter, one uppercase letter, one digit, and one special character');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Use Supabase client's updateUser method with the recovery session\n      const { error: updateError } = await supabaseClient.auth.updateUser({\n        password: password\n      });\n      \n      if (updateError) {\n        const errorMsg = updateError.message;\n        \n        // Provide more specific error messages\n        if (errorMsg.toLowerCase().includes('weak') || (errorMsg.toLowerCase().includes('password') && errorMsg.toLowerCase().includes('strong'))) {\n          throw new Error('Password is too weak. Please use a stronger password with at least 12 characters, including uppercase, lowercase, numbers, and special characters.');\n        } else if (errorMsg.toLowerCase().includes('same')) {\n          throw new Error('New password cannot be the same as your current password. Please choose a different password.');\n        } else if (errorMsg.toLowerCase().includes('session') || errorMsg.toLowerCase().includes('expired')) {\n          throw new Error('Your password reset link has expired. Please request a new one.');\n        } else {\n          throw new Error(errorMsg);\n        }\n      }\n      \n      setSuccess('Password reset successfully! Redirecting to login...');\n      \n      // Sign out to clear the recovery session\n      await supabaseClient.auth.signOut();\n      \n      setTimeout(() => {\n        navigate('/', { replace: true });\n      }, 2000);\n      \n    } catch (error: any) {\n      setError(error.message || 'Failed to reset password. Please try again or request a new reset link.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center mb-8\">\n          <img \n            src={raynLogo} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Cybersecurity Training Platform</p>\n        </div>\n        \n        <Card className=\"border-primary/20 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-primary\">\n              Reset Your Password\n            </CardTitle>\n            <CardDescription>\n              Enter your new password below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              {success && (\n                <Alert>\n                  <AlertDescription>{success}</AlertDescription>\n                </Alert>\n              )}\n              \n              {email && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    disabled\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">New Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    minLength={12}\n                    className=\"pr-10\"\n                    placeholder=\"Enter your new password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                    minLength={12}\n                    className=\"pr-10\"\n                    placeholder=\"Confirm your new password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\" \n                disabled={loading}\n              >\n                {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Reset Password\n              </Button>\n              \n              <div className=\"text-center\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => navigate('/')}\n                  className=\"w-full border-primary/20 text-primary hover:bg-primary/10\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import React from 'react';\nimport AuthPage from './AuthPage';\nimport ActivateAccount from './ActivateAccount';\nimport ResetPassword from './ResetPassword';\n\ninterface AuthModuleWrapperProps {\n  // Supabase client - should be passed from the consuming app\n  supabase: any;\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Input: any;\n  Label: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Alert: any;\n  AlertDescription: any;\n  // Assets - should be passed from the consuming app\n  logoUrl?: string;\n  // Component to render\n  component: 'AuthPage' | 'ActivateAccount' | 'ResetPassword';\n  // Additional props for specific components\n  authError?: string;\n}\n\nexport const AuthModuleWrapper: React.FC<AuthModuleWrapperProps> = ({\n  supabase,\n  Button,\n  Input,\n  Label,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Alert,\n  AlertDescription,\n  logoUrl,\n  component,\n  authError\n}) => {\n  const commonProps = {\n    Button,\n    Input,\n    Label,\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n    Alert,\n    AlertDescription,\n    logoUrl\n  };\n\n  switch (component) {\n    case 'AuthPage':\n      return <AuthPage {...commonProps} authError={authError} />;\n    case 'ActivateAccount':\n      return <ActivateAccount {...commonProps} supabase={supabase} />;\n    case 'ResetPassword':\n      return <ResetPassword {...commonProps} supabase={supabase} />;\n    default:\n      return null;\n  }\n};\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './AuthProvider';\n\ninterface ForgotPasswordProps {\n  // UI components - should be passed from the consuming app\n  Button: any;\n  Input: any;\n  Label: any;\n  Card: any;\n  CardContent: any;\n  CardDescription: any;\n  CardHeader: any;\n  CardTitle: any;\n  Alert: any;\n  AlertDescription: any;\n  // Assets - should be passed from the consuming app\n  logoUrl?: string;\n}\n\nconst ForgotPassword: React.FC<ForgotPasswordProps> = ({\n  Button,\n  Input,\n  Label,\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  Alert,\n  AlertDescription,\n  logoUrl\n}) => {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isError, setIsError] = useState(false);\n  const { resetPassword } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      setIsError(true);\n      setMessage('Please enter your email address');\n      return;\n    }\n    \n    setLoading(true);\n    setMessage('');\n    setIsError(false);\n    \n    try {\n      await resetPassword(email);\n      setIsError(false);\n      setMessage('Password reset email sent! Please check your inbox and follow the instructions.');\n    } catch (error: any) {\n      setIsError(true);\n      setMessage(error.message || 'Failed to send reset email. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-learning-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* RAYN Secure Branding */}\n        <div className=\"text-center\">\n          <img \n            src={logoUrl || '/rayn-logo.png'} \n            alt=\"RAYN Secure Logo\" \n            className=\"mx-auto h-20 w-auto mb-4\"\n          />\n          <h1 className=\"text-3xl font-bold text-learning-primary\">RAYN Secure</h1>\n          <p className=\"text-muted-foreground mt-2\">Behavioural Science Based Cybersecurity Learning</p>\n        </div>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Reset Your Password</CardTitle>\n            <CardDescription>\n              Enter your email address and we'll send you a link to reset your password\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n\n              {message && (\n                <Alert variant={isError ? \"destructive\" : \"default\"}>\n                  <AlertDescription>{message}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading && <div className=\"mr-2 h-4 w-4 animate-spin border-2 border-current border-t-transparent rounded-full\" />}\n                Send Reset Link\n              </Button>\n            </form>\n\n            <div className=\"mt-4 text-center\">\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto text-teal-600\"\n                onClick={() => navigate('/')}\n              >\n                ← Back to Sign In\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;\n"],"names":["error","baseUrl","redirectUrl","Button","Input","Label","Card","CardContent","CardDescription","CardHeader","CardTitle","Alert","AlertDescription"],"mappings":"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"}